"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
require("../../../../adapter-vue.js");
const index = require("../toolbar-item-container/index.vue.js");
const wordsLight = require("../../../../assets/icon/words-light.svg.js");
const wordsDark = require("../../../../assets/icon/words-dark.svg.js");
const wordsList = require("../../utils/wordsList.js");
const utils = require("../../utils/utils.js");
const env = require("../../../../utils/env.js");
const config = require("../../config.js");
const _hoisted_1 = ["onClick"];
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  emits: ["onDialogPopupShowOrHide"],
  setup(__props, { emit: __emit }) {
    const wordsIcon = config.default.getTheme() === "dark" ? wordsDark.default : wordsLight.default;
    const emits = __emit;
    const currentConversation = Vue.ref();
    const container = Vue.ref();
    TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.CONV, {
      currentConversation: (conversation) => {
        currentConversation.value = conversation;
      }
    });
    const selectWord = (item) => {
      var _a, _b, _c, _d, _e, _f;
      const options = {
        to: ((_b = (_a = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a.groupProfile) == null ? void 0 : _b.groupID) || ((_d = (_c = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c.userProfile) == null ? void 0 : _d.userID),
        conversationType: (_e = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _e.type,
        payload: {
          text: TUIChatEngine.TUITranslateService.t(`Words.${item.value}`)
        },
        needReadReceipt: utils.isEnabledMessageReadReceiptGlobal()
      };
      TUIChatEngine.TUIChatService.sendTextMessage(options);
      (_f = container == null ? void 0 : container.value) == null ? void 0 : _f.toggleDialogDisplay(false);
    };
    const closeDialog = () => {
      var _a;
      (_a = container == null ? void 0 : container.value) == null ? void 0 : _a.toggleDialogDisplay(false);
    };
    const onDialogShow = () => {
      emits("onDialogPopupShowOrHide", true);
    };
    const onDialogClose = () => {
      emits("onDialogPopupShowOrHide", false);
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(index.default, {
        ref_key: "container",
        ref: container,
        iconFile: Vue.unref(wordsIcon),
        title: "常用语",
        needBottomPopup: true,
        iconWidth: Vue.unref(env.isUniFrameWork) ? "26px" : "20px",
        iconHeight: Vue.unref(env.isUniFrameWork) ? "26px" : "20px",
        onOnDialogShow: onDialogShow,
        onOnDialogClose: onDialogClose
      }, {
        default: Vue.withCtx(() => [
          Vue.createElementVNode("div", {
            class: Vue.normalizeClass(["words", !Vue.unref(env.isPC) && "words-h5"])
          }, [
            Vue.createElementVNode("div", {
              class: Vue.normalizeClass(["words-header", !Vue.unref(env.isPC) && "words-h5-header"])
            }, [
              Vue.createElementVNode("span", {
                class: Vue.normalizeClass(["words-header-title", !Vue.unref(env.isPC) && "words-h5-header-title"])
              }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("Words.常用语-快捷回复工具")), 3),
              !Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createElementBlock("span", {
                key: 0,
                class: Vue.normalizeClass(["words-header-close", !Vue.unref(env.isPC) && "words-h5-header-close"]),
                onClick: closeDialog
              }, " 关闭 ", 2)) : Vue.createCommentVNode("", true)
            ], 2),
            Vue.createElementVNode("ul", {
              class: Vue.normalizeClass(["words-list", !Vue.unref(env.isPC) && "words-h5-list"])
            }, [
              (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(Vue.unref(wordsList.wordsList), (item, index2) => {
                return Vue.openBlock(), Vue.createElementBlock("li", {
                  key: index2,
                  class: Vue.normalizeClass(["words-list-item", !Vue.unref(env.isPC) && "words-h5-list-item"]),
                  onClick: ($event) => selectWord(item)
                }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t(`Words.${item.value}`)), 11, _hoisted_1);
              }), 128))
            ], 2)
          ], 2)
        ]),
        _: 1
      }, 8, ["iconFile", "iconWidth", "iconHeight"]);
    };
  }
});
exports.default = _sfc_main;
