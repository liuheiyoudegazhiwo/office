type BeforeCloseFn = (action?: Action) => void;
interface Props {
    title: string;
    message: string;
    callback?: BeforeCloseFn | null;
    duration: number;
    cancelButtonText: string;
    confirmButtonText: string;
    remove: Function;
}
type Action = 'cancel' | 'confirm' | 'close';
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    title: string;
    message: string;
    callback: null;
    duration: number;
    cancelButtonText: string;
    confirmButtonText: string;
    remove: () => void;
}>>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    close: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    title: string;
    message: string;
    callback: null;
    duration: number;
    cancelButtonText: string;
    confirmButtonText: string;
    remove: () => void;
}>>> & Readonly<{
    onClose?: ((...args: any[]) => any) | undefined;
}>, {
    title: string;
    message: string;
    callback: BeforeCloseFn | null;
    duration: number;
    cancelButtonText: string;
    confirmButtonText: string;
    remove: Function;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
