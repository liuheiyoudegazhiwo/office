type DoneFn = () => void;
type BeforeCloseFn = (done: DoneFn) => void;
interface Props {
    title?: string;
    modelValue: boolean;
    modal?: boolean;
    size?: string | number;
    beforeClose?: BeforeCloseFn | undefined;
    appendToBody?: boolean;
    appendToRoomContainer?: false;
    closeOnClickModal?: boolean;
}
declare function __VLS_template(): {
    title?(_: {}): any;
    default?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    title: string;
    modelValue: boolean;
    modal: boolean;
    size: string;
    beforeClose: undefined;
    appendToBody: boolean;
    appendToRoomContainer: boolean;
    closeOnClickModal: boolean;
}>>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    title: string;
    modelValue: boolean;
    modal: boolean;
    size: string;
    beforeClose: undefined;
    appendToBody: boolean;
    appendToRoomContainer: boolean;
    closeOnClickModal: boolean;
}>>> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    title: string;
    size: string | number;
    modelValue: boolean;
    closeOnClickModal: boolean;
    appendToBody: boolean;
    appendToRoomContainer: false;
    modal: boolean;
    beforeClose: BeforeCloseFn;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
