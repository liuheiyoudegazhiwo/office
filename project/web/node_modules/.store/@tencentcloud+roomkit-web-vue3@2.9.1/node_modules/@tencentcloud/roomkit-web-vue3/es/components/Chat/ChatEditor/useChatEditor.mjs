import { ref, watch } from "vue";
import { storeToRefs } from "pinia";
import renderMsg from "../../common/base/Message/Message.mjs";
import { TencentCloudChat } from "@tencentcloud/tuiroom-engine-js";
import useGetRoomEngine from "../../../hooks/useRoomEngine.mjs";
import { useChatStore } from "../../../stores/chat.mjs";
import { useRoomStore } from "../../../stores/room.mjs";
import { useI18n } from "../../../locales/index.mjs";
import { useBasicStore } from "../../../stores/basic.mjs";
import { decodeSendTextMsg } from "../util.mjs";
function useChatEditor() {
  const roomEngine = useGetRoomEngine();
  const { t } = useI18n();
  const basicStore = useBasicStore();
  const chatStore = useChatStore();
  const roomStore = useRoomStore();
  const { roomId } = storeToRefs(basicStore);
  const { isMessageDisabled } = storeToRefs(chatStore);
  const editorInputEle = ref();
  const sendMsg = ref("");
  const isEmojiToolbarVisible = ref(false);
  watch(isMessageDisabled, (value) => {
    if (value) {
      sendMsg.value = "";
    }
  });
  const sendMessage = async () => {
    var _a;
    const result = decodeSendTextMsg(sendMsg.value);
    if (result === "") {
      return;
    }
    sendMsg.value = "";
    isEmojiToolbarVisible.value = false;
    try {
      const tim = (_a = roomEngine.instance) == null ? void 0 : _a.getTIM();
      if (!tim) {
        throw new Error("tim is null");
      }
      const message = tim.createTextMessage({
        to: roomId.value,
        conversationType: TencentCloudChat.TYPES.CONV_GROUP,
        payload: {
          text: result
        }
      });
      await tim.sendMessage(message);
      chatStore.updateMessageList({
        ID: Math.random().toString(),
        type: "TIMTextElem",
        payload: {
          text: result
        },
        nick: roomStore.localUser.nameCard || roomStore.localUser.userName || roomStore.localUser.userId,
        from: roomStore.localUser.userId,
        flow: "out",
        sequence: Math.random()
      });
    } catch (e) {
      renderMsg({ type: "error", message: t("Failed to send the message") });
    }
  };
  const handleChooseEmoji = (emojiName) => {
    sendMsg.value += emojiName;
    editorInputEle.value.focus();
  };
  const togglePopover = () => {
    isEmojiToolbarVisible.value = !isEmojiToolbarVisible.value;
  };
  return {
    t,
    editorInputEle,
    sendMsg,
    isMessageDisabled,
    sendMessage,
    handleChooseEmoji,
    isEmojiToolbarVisible,
    togglePopover
  };
}
export {
  useChatEditor as default
};
