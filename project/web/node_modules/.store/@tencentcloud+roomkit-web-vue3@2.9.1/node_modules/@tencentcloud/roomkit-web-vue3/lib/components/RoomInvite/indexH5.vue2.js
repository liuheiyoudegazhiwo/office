"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const SvgIcon = require("../common/base/SvgIcon.vue.js");
const useRoomInviteHooks = require("./useRoomInviteHooks.js");
const ActionSheep = require("../common/base/ActionSheep.vue.js");
const Contacts = require("../ScheduleConference/Contacts.vue.js");
const CopyIcon = require("../common/icons/CopyIcon.vue.js");
const vTap = require("../../directives/vTap.js");
const _hoisted_1 = { class: "invite-container" };
const _hoisted_2 = { class: "invite-container-main" };
const _hoisted_3 = { class: "invite-item-container" };
const _hoisted_4 = { class: "invite-title" };
const _hoisted_5 = { class: "invite-title" };
const _hoisted_6 = { class: "invite-content" };
const _hoisted_7 = { class: "invite-content-bottom" };
const _hoisted_8 = { class: "invite-bottom" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "indexH5",
  setup(__props) {
    const {
      t,
      invitationFeatureDetails,
      showContacts,
      contactsConfirm,
      contacts,
      remoteEnteredUserList,
      isShowRoomShareForm,
      copyRoomIdAndRoomLink,
      displayedInviteInfoList,
      onCopy,
      sidebarName
    } = useRoomInviteHooks.default();
    function handleCloseActionSheet() {
      sidebarName.value = "";
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
        Vue.createElementVNode("div", _hoisted_2, [
          Vue.createVNode(ActionSheep.default, {
            visible: Vue.unref(sidebarName) === "invite",
            onClose: handleCloseActionSheet
          }, {
            default: Vue.withCtx(() => [
              Vue.createElementVNode("div", _hoisted_3, [
                (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(Vue.unref(invitationFeatureDetails), (item, index) => {
                  return Vue.withDirectives((Vue.openBlock(), Vue.createElementBlock("div", {
                    key: index,
                    class: "invite-item"
                  }, [
                    Vue.createVNode(SvgIcon.default, {
                      class: "icon",
                      icon: item.icon
                    }, null, 8, ["icon"]),
                    Vue.createElementVNode("span", _hoisted_4, Vue.toDisplayString(Vue.unref(t)(item.text)), 1)
                  ])), [
                    [Vue.unref(vTap.default), () => item.function()]
                  ]);
                }), 128))
              ])
            ]),
            _: 1
          }, 8, ["visible"]),
          Vue.createVNode(ActionSheep.default, {
            visible: Vue.unref(isShowRoomShareForm),
            onInput: _cache[0] || (_cache[0] = ($event) => isShowRoomShareForm.value = $event)
          }, {
            default: Vue.withCtx(() => [
              (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(Vue.unref(displayedInviteInfoList), (item) => {
                return Vue.openBlock(), Vue.createElementBlock("div", {
                  key: item.title,
                  class: "invite-content-main"
                }, [
                  Vue.createElementVNode("span", _hoisted_5, Vue.toDisplayString(Vue.unref(t)(item.title)), 1),
                  Vue.createElementVNode("span", _hoisted_6, Vue.toDisplayString(item.content), 1),
                  item.isShowCopyIcon ? Vue.withDirectives((Vue.openBlock(), Vue.createBlock(SvgIcon.default, {
                    key: 0,
                    icon: CopyIcon.default,
                    class: "copy"
                  }, null, 512)), [
                    [Vue.unref(vTap.default), () => Vue.unref(onCopy)(item.content)]
                  ]) : Vue.createCommentVNode("", true)
                ]);
              }), 128)),
              Vue.createElementVNode("div", _hoisted_7, [
                Vue.withDirectives((Vue.openBlock(), Vue.createElementBlock("span", _hoisted_8, [
                  Vue.createTextVNode(Vue.toDisplayString(Vue.unref(t)("Copy the conference number and link")), 1)
                ])), [
                  [Vue.unref(vTap.default), () => Vue.unref(copyRoomIdAndRoomLink)()]
                ])
              ])
            ]),
            _: 1
          }, 8, ["visible"])
        ]),
        Vue.createVNode(Contacts.default, {
          visible: Vue.unref(showContacts),
          contacts: Vue.unref(contacts),
          "disabled-list": Vue.unref(remoteEnteredUserList),
          onInput: _cache[1] || (_cache[1] = ($event) => showContacts.value = $event),
          onConfirm: Vue.unref(contactsConfirm),
          isMobile: true
        }, null, 8, ["visible", "contacts", "disabled-list", "onConfirm"])
      ]);
    };
  }
});
exports.default = _sfc_main;
