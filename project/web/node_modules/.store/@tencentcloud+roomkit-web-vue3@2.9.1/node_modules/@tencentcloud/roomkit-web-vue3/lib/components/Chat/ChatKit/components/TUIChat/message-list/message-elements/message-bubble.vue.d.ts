import { IMessageModel } from '../../../../../../../../../node_modules/@tencentcloud/chat-uikit-engine';

interface IProps {
    messageItem: IMessageModel;
    content?: any;
    classNameList?: string[];
    blinkMessageIDList?: string[];
    isMultipleSelectMode?: boolean;
    isAudioPlayed?: boolean | undefined;
    multipleSelectedMessageIDList?: string[];
}
declare function __VLS_template(): {
    messageElement?(_: {}): any;
    TUIEmojiPlugin?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<IProps>, {
    messageItem: () => IMessageModel;
    content: () => {};
    isAudioPlayed: boolean;
    blinkMessageIDList: () => never[];
    classNameList: () => never[];
    isMultipleSelectMode: boolean;
    multipleSelectedMessageIDList: () => never[];
}>>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    resendMessage: () => void;
    blinkMessage: (messageID: string) => void;
    setReadReceiptPanelVisible: (visible: boolean, message?: IMessageModel | undefined) => void;
    changeSelectMessageIDList: (options: {
        type: "add" | "remove" | "clearAll";
        messageID: string;
    }) => void;
    scrollTo: (scrollHeight: number) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<IProps>, {
    messageItem: () => IMessageModel;
    content: () => {};
    isAudioPlayed: boolean;
    blinkMessageIDList: () => never[];
    classNameList: () => never[];
    isMultipleSelectMode: boolean;
    multipleSelectedMessageIDList: () => never[];
}>>> & Readonly<{
    onScrollTo?: ((scrollHeight: number) => any) | undefined;
    onBlinkMessage?: ((messageID: string) => any) | undefined;
    onResendMessage?: (() => any) | undefined;
    onSetReadReceiptPanelVisible?: ((visible: boolean, message?: IMessageModel | undefined) => any) | undefined;
    onChangeSelectMessageIDList?: ((options: {
        type: "add" | "remove" | "clearAll";
        messageID: string;
    }) => any) | undefined;
}>, {
    content: any;
    messageItem: IMessageModel;
    classNameList: string[];
    blinkMessageIDList: string[];
    isMultipleSelectMode: boolean;
    isAudioPlayed: boolean;
    multipleSelectedMessageIDList: string[];
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
