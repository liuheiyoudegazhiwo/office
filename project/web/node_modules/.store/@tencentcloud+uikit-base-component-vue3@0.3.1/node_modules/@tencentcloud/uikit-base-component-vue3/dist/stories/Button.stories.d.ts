import { StoryObj } from '@storybook/vue3';

declare const meta: {
    title: string;
    component: {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
            type: {
                type: import('vue').PropType<"text" | "primary" | "success" | "warning" | "danger" | "info">;
                default: undefined;
            };
            disabled: {
                type: import('vue').PropType<boolean>;
                default: boolean;
            };
            size: {
                type: import('vue').PropType<"default" | "large">;
                default: undefined;
            };
            customStyle: {
                type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
                default: () => {};
            };
            loading: {
                type: import('vue').PropType<boolean>;
                default: boolean;
            };
            round: {
                type: import('vue').PropType<boolean>;
                default: boolean;
            };
            plain: {
                type: import('vue').PropType<boolean>;
                default: boolean;
            };
        }>> & Readonly<{
            onClick?: ((...args: any[]) => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            click: (...args: any[]) => void;
        }, import('vue').PublicProps, {
            type: "primary" | "success" | "warning" | "danger" | "info" | "text";
            disabled: boolean;
            size: "large" | "default";
            customStyle: string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null;
            loading: boolean;
            round: boolean;
            plain: boolean;
        }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('vue').ExtractPropTypes<{
            type: {
                type: import('vue').PropType<"text" | "primary" | "success" | "warning" | "danger" | "info">;
                default: undefined;
            };
            disabled: {
                type: import('vue').PropType<boolean>;
                default: boolean;
            };
            size: {
                type: import('vue').PropType<"default" | "large">;
                default: undefined;
            };
            customStyle: {
                type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
                default: () => {};
            };
            loading: {
                type: import('vue').PropType<boolean>;
                default: boolean;
            };
            round: {
                type: import('vue').PropType<boolean>;
                default: boolean;
            };
            plain: {
                type: import('vue').PropType<boolean>;
                default: boolean;
            };
        }>> & Readonly<{
            onClick?: ((...args: any[]) => any) | undefined;
        }>, {}, {}, {}, {}, {
            type: "primary" | "success" | "warning" | "danger" | "info" | "text";
            disabled: boolean;
            size: "large" | "default";
            customStyle: string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null;
            loading: boolean;
            round: boolean;
            plain: boolean;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
        type: {
            type: import('vue').PropType<"text" | "primary" | "success" | "warning" | "danger" | "info">;
            default: undefined;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        size: {
            type: import('vue').PropType<"default" | "large">;
            default: undefined;
        };
        customStyle: {
            type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
            default: () => {};
        };
        loading: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        round: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        plain: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        onClick?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        click: (...args: any[]) => void;
    }, string, {
        type: "primary" | "success" | "warning" | "danger" | "info" | "text";
        disabled: boolean;
        size: "large" | "default";
        customStyle: string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null;
        loading: boolean;
        round: boolean;
        plain: boolean;
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: {
            icon?(_: {}): any;
            default?(_: {}): any;
        };
    });
    tags: string[];
    argTypes: {
        size: {
            control: "select";
            options: string[];
            description: string;
        };
        type: {
            control: "select";
            options: string[];
            description: string;
        };
        loading: {
            control: "boolean";
            description: string;
        };
        disabled: {
            control: "boolean";
            description: string;
        };
        round: {
            control: "boolean";
            description: string;
        };
        plain: {
            control: "boolean";
            description: string;
        };
        onClick: {
            action: string;
        };
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Default: Story;
export declare const Types: Story;
export declare const Sizes: Story;
export declare const WithIcon: Story;
export declare const Disabled: Story;
export declare const Loading: Story;
export declare const Plain: Story;
export declare const Round: Story;
