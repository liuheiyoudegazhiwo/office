"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const env = require("../../../utils/env.js");
const _hoisted_1 = {
  key: 0,
  class: "dialog-main-header"
};
const _hoisted_2 = { class: "dialog-main-title" };
const _hoisted_3 = {
  key: 1,
  class: "dialog-main-footer"
};
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    show: {
      type: Boolean,
      default: false
    },
    isHeaderShow: {
      type: Boolean,
      default: true
    },
    isFooterShow: {
      type: Boolean,
      default: true
    },
    background: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: ""
    },
    center: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:show", "submit"],
  setup(__props, { emit: __emit }) {
    const clickType = {
      OUTSIDE: "outside",
      INSIDE: "inside"
    };
    const props = __props;
    const showDialog = Vue.ref(false);
    const isHeaderShowDialog = Vue.ref(true);
    const isFooterShowDialog = Vue.ref(true);
    const backgroundDialog = Vue.ref(true);
    const showTitle = Vue.ref("");
    Vue.watchEffect(() => {
      showDialog.value = props.show;
      showTitle.value = props.title;
      isHeaderShowDialog.value = props.isHeaderShow;
      isFooterShowDialog.value = props.isFooterShow;
      backgroundDialog.value = props.background;
    });
    const emit = __emit;
    const toggleView = (type) => {
      if (type === clickType.OUTSIDE) {
        close();
      }
    };
    const close = () => {
      showDialog.value = !showDialog.value;
      emit("update:show", showDialog.value);
    };
    const submit = () => {
      emit("submit");
      close();
    };
    return (_ctx, _cache) => {
      return Vue.unref(showDialog) ? (Vue.openBlock(), Vue.createElementBlock("div", {
        key: 0,
        class: Vue.normalizeClass(["dialog", [!Vue.unref(env.isPC) ? "dialog-h5" : "", __props.center ? "center" : ""]]),
        onClick: _cache[1] || (_cache[1] = Vue.withModifiers(($event) => toggleView(clickType.OUTSIDE), ["stop", "prevent"]))
      }, [
        Vue.createElementVNode("main", {
          class: Vue.normalizeClass(["dialog-main", [!Vue.unref(backgroundDialog) ? "dialog-main-back" : ""]]),
          onClick: _cache[0] || (_cache[0] = Vue.withModifiers(($event) => toggleView(clickType.INSIDE), ["stop", "prevent"]))
        }, [
          Vue.unref(isHeaderShowDialog) ? (Vue.openBlock(), Vue.createElementBlock("header", _hoisted_1, [
            Vue.createElementVNode("h1", _hoisted_2, Vue.toDisplayString(Vue.unref(showTitle)), 1),
            Vue.createElementVNode("i", {
              class: "icon icon-close",
              onClick: close
            })
          ])) : Vue.createCommentVNode("", true),
          Vue.createElementVNode("div", {
            class: Vue.normalizeClass(["dialog-main-content", [Vue.unref(env.isUniFrameWork) && Vue.unref(env.isH5) ? "dialog-main-content-uniapp" : ""]])
          }, [
            Vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ], 2),
          Vue.unref(isFooterShowDialog) ? (Vue.openBlock(), Vue.createElementBlock("footer", _hoisted_3, [
            Vue.createElementVNode("button", {
              class: "btn btn-cancel",
              onClick: close
            }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("component.取消")), 1),
            Vue.createElementVNode("button", {
              class: "btn btn-default",
              onClick: submit
            }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("component.确定")), 1)
          ])) : Vue.createCommentVNode("", true)
        ], 2)
      ], 2)) : Vue.createCommentVNode("", true);
    };
  }
});
exports.default = _sfc_main;
