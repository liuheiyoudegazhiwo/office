import { IMessageModel } from '../../../../../../../../../../node_modules/@tencentcloud/chat-uikit-engine';
import { IMergeMessageContent } from '../../../../../interface';

interface IProps {
    renderData: IMergeMessageContent;
    /**
     * The MessageRecord component has two main functions:
     * 1. display message record cards primarily.
     * 2. clicking on it and show the simple message list.
     * When used as a nested component with the disabled prop
     * it is only need renderData to render message record cards.
     * Therefore, 'messageItem' and 'disabled' is not a required prop.
     */
    disabled?: boolean;
    messageItem?: IMessageModel;
}
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<IProps>, {
    messageItem: () => IMessageModel;
    disabled: boolean;
}>>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    assignMessageIDInUniapp: (messageID: string) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<IProps>, {
    messageItem: () => IMessageModel;
    disabled: boolean;
}>>> & Readonly<{
    onAssignMessageIDInUniapp?: ((messageID: string) => any) | undefined;
}>, {
    disabled: boolean;
    messageItem: IMessageModel;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
