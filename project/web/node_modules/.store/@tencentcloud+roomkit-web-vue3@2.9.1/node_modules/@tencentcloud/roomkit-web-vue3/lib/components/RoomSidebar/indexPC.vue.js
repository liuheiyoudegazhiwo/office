"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const Drawer = require("../common/base/Drawer.vue.js");
const useSideBarHooks = require("./useSideBarHooks.js");
const index$2 = require("../ManageMember/index.js");
const index$1 = require("../RoomMore/index.js");
const index = require("../Chat/index/index.js");
const AITranscription = require("../common/widgets/AITools/AITranscription.vue.js");
const _hoisted_1 = { class: "sidebar-container" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "indexPC",
  setup(__props) {
    const { isSidebarOpen, title, handleClose, sidebarName } = useSideBarHooks.default();
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
        Vue.createVNode(Drawer.default, {
          modelValue: Vue.unref(isSidebarOpen),
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => Vue.isRef(isSidebarOpen) ? isSidebarOpen.value = $event : null),
          modal: false,
          title: Vue.unref(title),
          "before-close": Vue.unref(handleClose),
          size: 400
        }, {
          default: Vue.withCtx(() => [
            Vue.unref(sidebarName) == "chat" ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index.default), { key: 0 })) : Vue.createCommentVNode("", true),
            Vue.unref(sidebarName) == "more" ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index$1.default), { key: 1 })) : Vue.createCommentVNode("", true),
            Vue.unref(sidebarName) == "manage-member" ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index$2.default), { key: 2 })) : Vue.createCommentVNode("", true),
            Vue.unref(sidebarName) == "aiTranscription" ? (Vue.openBlock(), Vue.createBlock(AITranscription.default, { key: 3 })) : Vue.createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["modelValue", "title", "before-close"])
      ]);
    };
  }
});
exports.default = _sfc_main;
