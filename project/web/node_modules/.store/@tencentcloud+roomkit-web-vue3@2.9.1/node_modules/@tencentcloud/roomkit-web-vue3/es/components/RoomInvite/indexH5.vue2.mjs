import { defineComponent, createElementBlock, openBlock, createElementVNode, createVNode, unref, withCtx, Fragment, renderList, withDirectives, toDisplayString, createCommentVNode, createBlock, createTextVNode } from "vue";
import SvgIcon from "../common/base/SvgIcon.vue.mjs";
import useRoomInvite from "./useRoomInviteHooks.mjs";
import ActionSheep from "../common/base/ActionSheep.vue.mjs";
import Contacts from "../ScheduleConference/Contacts.vue.mjs";
import copyIcon from "../common/icons/CopyIcon.vue.mjs";
import vTap from "../../directives/vTap.mjs";
const _hoisted_1 = { class: "invite-container" };
const _hoisted_2 = { class: "invite-container-main" };
const _hoisted_3 = { class: "invite-item-container" };
const _hoisted_4 = { class: "invite-title" };
const _hoisted_5 = { class: "invite-title" };
const _hoisted_6 = { class: "invite-content" };
const _hoisted_7 = { class: "invite-content-bottom" };
const _hoisted_8 = { class: "invite-bottom" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "indexH5",
  setup(__props) {
    const {
      t,
      invitationFeatureDetails,
      showContacts,
      contactsConfirm,
      contacts,
      remoteEnteredUserList,
      isShowRoomShareForm,
      copyRoomIdAndRoomLink,
      displayedInviteInfoList,
      onCopy,
      sidebarName
    } = useRoomInvite();
    function handleCloseActionSheet() {
      sidebarName.value = "";
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createElementVNode("div", _hoisted_2, [
          createVNode(ActionSheep, {
            visible: unref(sidebarName) === "invite",
            onClose: handleCloseActionSheet
          }, {
            default: withCtx(() => [
              createElementVNode("div", _hoisted_3, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(invitationFeatureDetails), (item, index) => {
                  return withDirectives((openBlock(), createElementBlock("div", {
                    key: index,
                    class: "invite-item"
                  }, [
                    createVNode(SvgIcon, {
                      class: "icon",
                      icon: item.icon
                    }, null, 8, ["icon"]),
                    createElementVNode("span", _hoisted_4, toDisplayString(unref(t)(item.text)), 1)
                  ])), [
                    [unref(vTap), () => item.function()]
                  ]);
                }), 128))
              ])
            ]),
            _: 1
          }, 8, ["visible"]),
          createVNode(ActionSheep, {
            visible: unref(isShowRoomShareForm),
            onInput: _cache[0] || (_cache[0] = ($event) => isShowRoomShareForm.value = $event)
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(displayedInviteInfoList), (item) => {
                return openBlock(), createElementBlock("div", {
                  key: item.title,
                  class: "invite-content-main"
                }, [
                  createElementVNode("span", _hoisted_5, toDisplayString(unref(t)(item.title)), 1),
                  createElementVNode("span", _hoisted_6, toDisplayString(item.content), 1),
                  item.isShowCopyIcon ? withDirectives((openBlock(), createBlock(SvgIcon, {
                    key: 0,
                    icon: copyIcon,
                    class: "copy"
                  }, null, 512)), [
                    [unref(vTap), () => unref(onCopy)(item.content)]
                  ]) : createCommentVNode("", true)
                ]);
              }), 128)),
              createElementVNode("div", _hoisted_7, [
                withDirectives((openBlock(), createElementBlock("span", _hoisted_8, [
                  createTextVNode(toDisplayString(unref(t)("Copy the conference number and link")), 1)
                ])), [
                  [unref(vTap), () => unref(copyRoomIdAndRoomLink)()]
                ])
              ])
            ]),
            _: 1
          }, 8, ["visible"])
        ]),
        createVNode(Contacts, {
          visible: unref(showContacts),
          contacts: unref(contacts),
          "disabled-list": unref(remoteEnteredUserList),
          onInput: _cache[1] || (_cache[1] = ($event) => showContacts.value = $event),
          onConfirm: unref(contactsConfirm),
          isMobile: true
        }, null, 8, ["visible", "contacts", "disabled-list", "onConfirm"])
      ]);
    };
  }
});
export {
  _sfc_main as default
};
