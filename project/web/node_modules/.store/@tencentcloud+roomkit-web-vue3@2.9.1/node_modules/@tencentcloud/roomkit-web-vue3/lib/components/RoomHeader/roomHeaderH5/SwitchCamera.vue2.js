"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const useDeviceManager = require("../../../hooks/useDeviceManager.js");
const SvgIcon = require("../../common/base/SvgIcon.vue.js");
const pinia = require("pinia");
const CameraSwitchIcon = require("../../common/icons/CameraSwitchIcon.vue.js");
const basic = require("../../../stores/basic.js");
const vTap = require("../../../directives/vTap.js");
const _hoisted_1 = { class: "camera-icon" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "SwitchCamera",
  setup(__props) {
    const basicStore = basic.useBasicStore();
    const { isFrontCamera } = pinia.storeToRefs(basicStore);
    const { deviceManager } = useDeviceManager.default();
    async function handleSwitchCamera() {
      var _a;
      await ((_a = deviceManager.instance) == null ? void 0 : _a.switchCamera({
        isFrontCamera: !isFrontCamera.value
      }));
      basicStore.setIsFrontCamera(!isFrontCamera.value);
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
        Vue.withDirectives(Vue.createVNode(SvgIcon.default, { icon: CameraSwitchIcon.default }, null, 512), [
          [Vue.unref(vTap.default), handleSwitchCamera]
        ])
      ]);
    };
  }
});
exports.default = _sfc_main;
