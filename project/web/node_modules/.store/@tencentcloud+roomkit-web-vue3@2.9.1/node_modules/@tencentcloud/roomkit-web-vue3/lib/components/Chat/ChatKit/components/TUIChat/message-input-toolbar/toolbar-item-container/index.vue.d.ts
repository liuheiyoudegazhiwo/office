declare function __VLS_template(): {
    default?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    iconFile: {
        type: StringConstructor;
        required: true;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    needDialog: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconWidth: {
        type: StringConstructor;
        default: string;
    };
    iconHeight: {
        type: StringConstructor;
        default: string;
    };
    needBottomPopup: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {
    toggleDialogDisplay: (showStatus: boolean) => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    onIconClick: (...args: any[]) => void;
    onDialogClose: (...args: any[]) => void;
    onDialogShow: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    iconFile: {
        type: StringConstructor;
        required: true;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    needDialog: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconWidth: {
        type: StringConstructor;
        default: string;
    };
    iconHeight: {
        type: StringConstructor;
        default: string;
    };
    needBottomPopup: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    onOnIconClick?: ((...args: any[]) => any) | undefined;
    onOnDialogClose?: ((...args: any[]) => any) | undefined;
    onOnDialogShow?: ((...args: any[]) => any) | undefined;
}>, {
    title: string;
    iconWidth: string;
    iconHeight: string;
    needDialog: boolean;
    needBottomPopup: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
