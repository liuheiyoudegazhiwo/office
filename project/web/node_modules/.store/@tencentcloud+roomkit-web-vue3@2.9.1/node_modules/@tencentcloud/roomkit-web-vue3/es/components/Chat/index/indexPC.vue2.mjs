import { defineComponent, defineAsyncComponent, createElementBlock, openBlock, createVNode, unref } from "vue";
import { TUIConversationService } from "@tencentcloud/chat-uikit-engine";
import TUIChatKit from "../ChatKit/server.mjs";
import "../../../services/main.mjs";
import { roomService } from "../../../services/roomService.mjs";
import "../../../locales/index.mjs";
import "@tencentcloud/tuiroom-engine-js";
import "../../../utils/environment.mjs";
import "mitt";
import "../../../services/manager/roomActionManager.mjs";
import "@tencentcloud/tui-core";
import { hideTUIChatFeatures } from "../ChatKit/components/TUIChat/config.mjs";
import TUIChatServer from "../ChatKit/components/TUIChat/server.mjs";
import { useBasicStore } from "../../../stores/basic.mjs";
import { useUIKit } from "@tencentcloud/uikit-base-component-vue3";
const _hoisted_1 = { class: "chat-container" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "indexPC",
  setup(__props) {
    const { theme, setTheme } = useUIKit();
    const TUIChat = defineAsyncComponent(
      () => import("../ChatKit/components/TUIChat/index.vue.mjs")
    );
    const basicStore = useBasicStore();
    const defaultHideFeaturesButtons = [
      "InputFace",
      "InputStickers",
      "InputVoice",
      "InputEvaluation",
      "InputQuickReplies",
      "InputMention",
      "QuoteMessage",
      "ForwardMessage",
      "TranslateMessage",
      "VoiceToText",
      "EmojiReaction",
      "MultiSelection",
      "MessageSearch",
      "ReadStatus"
    ];
    const currentRoomId = `GROUP${basicStore.roomId}`;
    const chatKitServer = new TUIChatKit();
    chatKitServer.init();
    new TUIChatServer();
    TUIConversationService.switchConversation(currentRoomId);
    hideTUIChatFeatures(defaultHideFeaturesButtons);
    roomService.setLanguage(basicStore.lang);
    if (!theme.value) {
      roomService.setTheme(basicStore.defaultTheme);
    } else {
      setTheme(theme.value);
      roomService.setTheme(theme.value);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(unref(TUIChat))
      ]);
    };
  }
});
export {
  _sfc_main as default
};
