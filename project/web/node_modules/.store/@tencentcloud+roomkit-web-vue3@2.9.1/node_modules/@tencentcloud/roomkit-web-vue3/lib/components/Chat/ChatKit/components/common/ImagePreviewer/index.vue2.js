"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const universalApi = require("@tencentcloud/universal-api");
const Icon = require("../Icon.vue.js");
const iconClose = require("../../../assets/icon/icon-close.svg.js");
const iconArrowLeft = require("../../../assets/icon/icon-arrow-left.svg.js");
const zoomIn = require("../../../assets/icon/zoom-in.svg.js");
const zoomOut = require("../../../assets/icon/zoom-out.svg.js");
const rotateLeft = require("../../../assets/icon/rotate-left.svg.js");
const rotateRight = require("../../../assets/icon/rotate-right.svg.js");
const download = require("../../../assets/icon/download.svg.js");
const imageItem_vue_vue_type_script_setup_true_lang = require("./image-item.vue.js");
;/* empty css                 */
const index = require("../Toast/index.js");
const env = require("../../../utils/env.js");
const type = require("../Toast/type.js");
const _hoisted_1 = { class: "image-counter" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    imageList: { default: () => [] },
    currentImage: {}
  },
  emits: ["close"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const imageFormatMap = /* @__PURE__ */ new Map([
      [1, "jpg"],
      [2, "gif"],
      [3, "png"],
      [4, "bmp"]
    ]);
    const emit = __emit;
    const zoom = Vue.ref(1);
    const rotate = Vue.ref(0);
    const minZoom = Vue.ref(0.1);
    const currentImageIndex = Vue.ref(0);
    const image = Vue.ref();
    const ulRef = Vue.ref();
    let startX = 0;
    const touchStore = {};
    let moveFlag = false;
    let twoTouchesFlag = false;
    let timer = null;
    Vue.watchEffect(() => {
      currentImageIndex.value = props.imageList.findIndex((message) => {
        var _a;
        return message.ID === ((_a = props == null ? void 0 : props.currentImage) == null ? void 0 : _a.ID);
      });
    });
    const isNumber = (value) => {
      return typeof value === "number" && isFinite(value);
    };
    const handleTouchStart = (e) => {
      e.preventDefault();
      moveInit(e);
      twoTouchesInit(e);
    };
    const handleTouchMove = (e) => {
      e.preventDefault();
      moveFlag = true;
      if (e.touches && e.touches.length === 2) {
        twoTouchesFlag = true;
        handleTwoTouches(e);
      }
    };
    const handleTouchEnd = (e) => {
      var _a;
      e.preventDefault();
      e.stopPropagation();
      let moveEndX = 0;
      let X = 0;
      if (twoTouchesFlag) {
        if (!timer) {
          twoTouchesFlag = false;
          delete touchStore.pageX2;
          delete touchStore.pageY2;
          timer = setTimeout(() => {
            timer = null;
          }, 200);
        }
        return;
      }
      if (timer === null) {
        switch (moveFlag) {
          case true:
            moveEndX = (_a = e == null ? void 0 : e.changedTouches[0]) == null ? void 0 : _a.pageX;
            X = moveEndX - startX;
            if (X > 100) {
              goPrev();
            } else if (X < -100) {
              goNext();
            }
            break;
          case false:
            close();
            break;
        }
        timer = setTimeout(() => {
          timer = null;
        }, 200);
      }
    };
    const handleTouchCancel = () => {
      twoTouchesFlag = false;
      delete touchStore.pageX1;
      delete touchStore.pageY1;
    };
    const handleWheel = (e) => {
      e.preventDefault();
      if (Math.abs(e.deltaX) !== 0 && Math.abs(e.deltaY) !== 0) return;
      let scale = zoom.value;
      scale += e.deltaY * (e.ctrlKey ? -0.01 : 2e-3);
      scale = Math.min(Math.max(0.125, scale), 4);
      zoom.value = scale;
    };
    const moveInit = (e) => {
      var _a;
      startX = (_a = e == null ? void 0 : e.changedTouches[0]) == null ? void 0 : _a.pageX;
      moveFlag = false;
    };
    const twoTouchesInit = (e) => {
      const touch1 = e == null ? void 0 : e.touches[0];
      const touch2 = e == null ? void 0 : e.touches[1];
      touchStore.pageX1 = touch1 == null ? void 0 : touch1.pageX;
      touchStore.pageY1 = touch1 == null ? void 0 : touch1.pageY;
      if (touch2) {
        touchStore.pageX2 = touch2 == null ? void 0 : touch2.pageX;
        touchStore.pageY2 = touch2 == null ? void 0 : touch2.pageY;
      }
    };
    const handleTwoTouches = (e) => {
      const touch1 = e == null ? void 0 : e.touches[0];
      const touch2 = e == null ? void 0 : e.touches[1];
      if (touch2) {
        if (!isNumber(touchStore.pageX2)) {
          touchStore.pageX2 = touch2.pageX;
        }
        if (!isNumber(touchStore.pageY2)) {
          touchStore.pageY2 = touch2.pageY;
        }
      }
      const getDistance = (startX2, startY, stopX, stopY) => {
        return Math.hypot(stopX - startX2, stopY - startY);
      };
      if (!isNumber(touchStore.pageX1) || !isNumber(touchStore.pageY1) || !isNumber(touchStore.pageX2) || !isNumber(touchStore.pageY2)) {
        return;
      }
      const touchZoom = getDistance(touch1.pageX, touch1.pageY, touch2.pageX, touch2.pageY) / getDistance(
        touchStore.pageX1,
        touchStore.pageY1,
        touchStore.pageX2,
        touchStore.pageY2
      );
      zoom.value = Math.min(Math.max(0.5, zoom.value * touchZoom), 4);
    };
    Vue.onMounted(() => {
      (document == null ? void 0 : document.addEventListener) && (document == null ? void 0 : document.addEventListener("keydown", handleEsc));
    });
    const handleEsc = (e) => {
      e.preventDefault();
      if ((e == null ? void 0 : e.keyCode) === 27) {
        close();
      }
    };
    const zoomIn$1 = () => {
      zoom.value += 0.1;
    };
    const zoomOut$1 = () => {
      zoom.value = zoom.value - 0.1 > minZoom.value ? zoom.value - 0.1 : minZoom.value;
    };
    const close = () => {
      emit("close");
    };
    const rotateLeft$1 = () => {
      rotate.value -= 90;
    };
    const rotateRight$1 = () => {
      rotate.value += 90;
    };
    const goNext = () => {
      currentImageIndex.value < props.imageList.length - 1 && currentImageIndex.value++;
      initStyle();
    };
    const goPrev = () => {
      currentImageIndex.value > 0 && currentImageIndex.value--;
      initStyle();
    };
    const initStyle = () => {
      zoom.value = 1;
      rotate.value = 0;
    };
    const getImageUrl = (message) => {
      var _a, _b, _c, _d;
      if (env.isPC) {
        return (_b = (_a = message == null ? void 0 : message.payload) == null ? void 0 : _a.imageInfoArray[0]) == null ? void 0 : _b.url;
      } else {
        return (_d = (_c = message == null ? void 0 : message.payload) == null ? void 0 : _c.imageInfoArray[2]) == null ? void 0 : _d.url;
      }
    };
    const save = () => {
      var _a, _b;
      const imageMessage = props.imageList[currentImageIndex.value];
      const imageSrc = (_b = (_a = imageMessage == null ? void 0 : imageMessage.payload) == null ? void 0 : _a.imageInfoArray[0]) == null ? void 0 : _b.url;
      if (!imageSrc) {
        index.Toast({
          message: TUIChatEngine.TUITranslateService.t("component.图片 url 不存在"),
          type: type.default.ERROR
        });
        return;
      }
      switch (universalApi.getPlatform()) {
        case "wechat":
          universalApi.TUIGlobal.getSetting({
            success: (res) => {
              if (!(res == null ? void 0 : res.authSetting["scope.writePhotosAlbum"])) {
                universalApi.TUIGlobal.authorize({
                  scope: "scope.writePhotosAlbum",
                  success() {
                    downloadImgInUni(imageSrc);
                  },
                  fail() {
                    universalApi.TUIGlobal.showModal({
                      title: "您已拒绝获取相册权限",
                      content: "是否进入权限管理，调整授权？",
                      success: (res2) => {
                        if (res2.confirm) {
                          universalApi.TUIGlobal.openSetting({
                            success: (res3) => {
                              console.log(res3.authSetting);
                            }
                          });
                        } else if (res2.cancel) {
                          return index.Toast({
                            message: TUIChatEngine.TUITranslateService.t("component.已取消"),
                            type: type.default.ERROR
                          });
                        }
                      }
                    });
                  }
                });
              } else {
                downloadImgInUni(imageSrc);
              }
            },
            fail: () => {
              index.Toast({
                message: TUIChatEngine.TUITranslateService.t("component.获取权限失败"),
                type: type.default.ERROR
              });
            }
          });
          break;
        case "app":
          downloadImgInUni(imageSrc);
          break;
        default:
          downloadImgInWeb(imageSrc);
          break;
      }
    };
    const downloadImgInUni = (src) => {
      universalApi.TUIGlobal.showLoading({
        title: "大图提取中"
      });
      universalApi.TUIGlobal.downloadFile({
        url: src,
        success: function(res) {
          universalApi.TUIGlobal.hideLoading();
          universalApi.TUIGlobal.saveImageToPhotosAlbum({
            filePath: res.tempFilePath,
            success: () => {
              index.Toast({
                message: TUIChatEngine.TUITranslateService.t("component.已保存至相册"),
                type: type.default.SUCCESS
              });
            }
          });
        },
        fail: function() {
          universalApi.TUIGlobal.hideLoading();
          index.Toast({
            message: TUIChatEngine.TUITranslateService.t("component.图片下载失败"),
            type: type.default.ERROR
          });
        }
      });
    };
    const downloadImgInWeb = (src) => {
      var _a;
      const option = {
        mode: "cors",
        headers: new Headers({
          "Content-Type": "application/x-www-form-urlencoded"
        })
      };
      const imageMessage = props.imageList[currentImageIndex.value];
      const imageFormat = (_a = imageMessage == null ? void 0 : imageMessage.payload) == null ? void 0 : _a.imageFormat;
      if (!imageFormatMap.has(imageFormat)) {
        index.Toast({
          message: TUIChatEngine.TUITranslateService.t("component.暂不支持下载此类型图片"),
          type: type.default.ERROR
        });
        return;
      }
      if (window.fetch) {
        fetch(src, option).then((res) => res.blob()).then((blob) => {
          const a = document.createElement("a");
          const url = window.URL.createObjectURL(blob);
          a.href = url;
          a.download = url + "." + imageFormatMap.get(imageFormat);
          a.click();
        });
      } else {
        const a = document.createElement("a");
        a.href = src;
        a.target = "_blank";
        a.download = src + "." + imageFormatMap.get(imageFormat);
        a.click();
      }
    };
    Vue.onUnmounted(() => {
      (document == null ? void 0 : document.removeEventListener) && (document == null ? void 0 : document.removeEventListener("keydown", handleEsc));
    });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", {
        class: Vue.normalizeClass(["image-previewer", [Vue.unref(env.isMobile) && "image-previewer-h5"]])
      }, [
        Vue.createElementVNode("div", {
          ref_key: "image",
          ref: image,
          class: "image-wrapper",
          onTouchstart: Vue.withModifiers(handleTouchStart, ["stop"]),
          onTouchmove: Vue.withModifiers(handleTouchMove, ["stop"]),
          onTouchend: Vue.withModifiers(handleTouchEnd, ["stop"]),
          onTouchcancel: Vue.withModifiers(handleTouchCancel, ["stop"]),
          onWheel: Vue.withModifiers(handleWheel, ["stop"])
        }, [
          Vue.createElementVNode("ul", {
            ref_key: "ulRef",
            ref: ulRef,
            class: "image-list",
            style: Vue.normalizeStyle({
              width: `${_ctx.imageList.length * 100}%`,
              transform: `translateX(-${Vue.unref(currentImageIndex) * 100 / _ctx.imageList.length}%)`,
              transition: "0.5s"
            })
          }, [
            (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(_ctx.imageList, (item, index2) => {
              return Vue.openBlock(), Vue.createElementBlock("li", {
                key: index2,
                class: "image-item"
              }, [
                Vue.createVNode(imageItem_vue_vue_type_script_setup_true_lang.default, {
                  zoom: Vue.unref(zoom),
                  rotate: Vue.unref(rotate),
                  src: getImageUrl(item),
                  messageItem: item,
                  class: Vue.normalizeClass([Vue.unref(env.isUniFrameWork) ? "image-item" : ""])
                }, null, 8, ["zoom", "rotate", "src", "messageItem", "class"])
              ]);
            }), 128))
          ], 4)
        ], 544),
        Vue.withDirectives(Vue.createElementVNode("div", {
          class: "icon icon-close",
          onClick: close
        }, [
          Vue.createVNode(Icon.default, {
            file: Vue.unref(iconClose.default),
            width: "16px",
            height: "16px"
          }, null, 8, ["file"])
        ], 512), [
          [Vue.vShow, Vue.unref(env.isPC)]
        ]),
        Vue.unref(env.isPC) && Vue.unref(currentImageIndex) > 0 ? (Vue.openBlock(), Vue.createElementBlock("div", {
          key: 0,
          class: "image-button image-button-left",
          onClick: goPrev
        }, [
          Vue.createVNode(Icon.default, { file: Vue.unref(iconArrowLeft.default) }, null, 8, ["file"])
        ])) : Vue.createCommentVNode("", true),
        Vue.unref(env.isPC) && Vue.unref(currentImageIndex) < _ctx.imageList.length - 1 ? (Vue.openBlock(), Vue.createElementBlock("div", {
          key: 1,
          class: "image-button image-button-right",
          onClick: goNext
        }, [
          Vue.createVNode(Icon.default, { file: Vue.unref(iconArrowLeft.default) }, null, 8, ["file"])
        ])) : Vue.createCommentVNode("", true),
        Vue.createElementVNode("div", {
          class: Vue.normalizeClass(["actions-bar", Vue.unref(env.isMobile) && "actions-bar-h5"])
        }, [
          Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 0,
            class: "icon-zoom-in",
            onClick: zoomIn$1
          }, [
            Vue.createVNode(Icon.default, {
              file: Vue.unref(zoomIn.default),
              width: "27px",
              height: "27px"
            }, null, 8, ["file"])
          ])) : Vue.createCommentVNode("", true),
          Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 1,
            class: "icon-zoom-out",
            onClick: zoomOut$1
          }, [
            Vue.createVNode(Icon.default, {
              file: Vue.unref(zoomOut.default),
              width: "27px",
              height: "27px"
            }, null, 8, ["file"])
          ])) : Vue.createCommentVNode("", true),
          Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 2,
            class: "icon-refresh-left",
            onClick: rotateLeft$1
          }, [
            Vue.createVNode(Icon.default, {
              file: Vue.unref(rotateLeft.default),
              width: "27px",
              height: "27px"
            }, null, 8, ["file"])
          ])) : Vue.createCommentVNode("", true),
          Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 3,
            class: "icon-refresh-right",
            onClick: rotateRight$1
          }, [
            Vue.createVNode(Icon.default, {
              file: Vue.unref(rotateRight.default),
              width: "27px",
              height: "27px"
            }, null, 8, ["file"])
          ])) : Vue.createCommentVNode("", true),
          Vue.createElementVNode("span", _hoisted_1, Vue.toDisplayString(Vue.unref(currentImageIndex) + 1) + " / " + Vue.toDisplayString(_ctx.imageList.length), 1)
        ], 2),
        Vue.createElementVNode("div", {
          class: "save",
          onClick: Vue.withModifiers(save, ["stop", "prevent"])
        }, [
          Vue.createVNode(Icon.default, {
            file: Vue.unref(download.default),
            width: "20px",
            height: "20px"
          }, null, 8, ["file"])
        ])
      ], 2);
    };
  }
});
exports.default = _sfc_main;
