"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const Icon = require("../../../common/Icon.vue.js");
const index$2 = require("./read-status/index.vue.js");
const index$5 = require("./message-quote/index.vue.js");
const index$1 = require("../../../common/Avatar/index.vue.js");
const index$3 = require("./message-translate/index.vue.js");
const index$4 = require("./message-convert/index.vue.js");
const index = require("../../../common/RadioSelect/index.vue.js");
const loading = require("../../../../assets/icon/loading.png.js");
const utils = require("../../utils/utils.js");
const env = require("../../../../utils/env.js");
const _hoisted_1 = { class: "message-bubble-content" };
const _hoisted_2 = {
  key: 0,
  class: "message-body-nick-name"
};
const _hoisted_3 = { class: "content-main" };
const _hoisted_4 = {
  key: 0,
  class: "content-has-risk-tips"
};
const _hoisted_5 = {
  key: 0,
  class: "audio-unplay-mark"
};
const _hoisted_6 = { class: "message-bubble-extra-content" };
const riskImageReplaceUrl = "https://web.sdk.qcloud.com/component/TUIKit/assets/has_risk_default.png";
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "message-bubble",
  props: {
    messageItem: { default: () => ({}) },
    content: { default: () => ({}) },
    classNameList: { default: () => [] },
    blinkMessageIDList: { default: () => [] },
    isMultipleSelectMode: { type: Boolean, default: false },
    isAudioPlayed: { type: Boolean, default: false },
    multipleSelectedMessageIDList: { default: () => [] }
  },
  emits: ["resendMessage", "blinkMessage", "setReadReceiptPanelVisible", "changeSelectMessageIDList", "scrollTo"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const props = __props;
    const TYPES = TUIChatEngine.TYPES;
    const needLoadingIconMessageType = [
      TYPES.MSG_LOCATION,
      TYPES.MSG_TEXT,
      TYPES.MSG_CUSTOM,
      TYPES.MSG_MERGER,
      TYPES.MSG_FACE
    ];
    const { blinkMessageIDList, messageItem: message } = Vue.toRefs(props);
    const isMultipleSelected = Vue.computed(() => {
      return props.multipleSelectedMessageIDList.includes(message.value.ID);
    });
    const isDisplayUnplayMark = Vue.computed(() => {
      return message.value.flow === "in" && message.value.status === "success" && message.value.type === TYPES.MSG_AUDIO && !props.isAudioPlayed;
    });
    const containerClassNameList = Vue.computed(() => {
      return [
        "message-bubble",
        isMultipleSelected.value ? "multiple-selected" : "",
        ...props.classNameList
      ];
    });
    const hasEmojiReaction = Vue.computed(() => {
      var _a;
      return (_a = message.value) == null ? void 0 : _a.reactionList.some((item) => item.totalUserCount !== 0);
    });
    const isNoPadding = Vue.computed(() => {
      return !hasEmojiReaction.value && [TYPES.MSG_IMAGE, TYPES.MSG_VIDEO, TYPES.MSG_MERGER].includes(message.value.type);
    });
    const riskContentText = Vue.computed(() => {
      let content = TUIChatEngine.TUITranslateService.t("TUIChat.涉及敏感内容") + ", ";
      if (message.value.flow === "out") {
        content += TUIChatEngine.TUITranslateService.t("TUIChat.发送失败");
      } else {
        content += TUIChatEngine.TUITranslateService.t(
          message.value.type === TYPES.MSG_AUDIO ? "TUIChat.无法收听" : "TUIChat.无法查看"
        );
      }
      return content;
    });
    const isBlink = Vue.computed(() => {
      var _a, _b;
      if ((_a = message.value) == null ? void 0 : _a.ID) {
        return (_b = blinkMessageIDList == null ? void 0 : blinkMessageIDList.value) == null ? void 0 : _b.includes(message.value.ID);
      }
      return false;
    });
    function toggleMultipleSelect(isSelected) {
      emits("changeSelectMessageIDList", {
        type: isSelected ? "add" : "remove",
        messageID: message.value.ID
      });
    }
    function resendMessage() {
      var _a;
      if (!((_a = message.value) == null ? void 0 : _a.hasRiskContent)) {
        emits("resendMessage");
      }
    }
    function blinkMessage(messageID) {
      emits("blinkMessage", messageID);
    }
    function scrollTo(scrollHeight) {
      emits("scrollTo", scrollHeight);
    }
    function openReadUserPanel() {
      emits("setReadReceiptPanelVisible", true, message.value);
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", {
        class: Vue.normalizeClass(Vue.unref(containerClassNameList))
      }, [
        props.isMultipleSelectMode ? (Vue.openBlock(), Vue.createBlock(index.default, {
          key: 0,
          class: "multiple-select-radio",
          isSelected: Vue.unref(isMultipleSelected),
          onOnChange: toggleMultipleSelect
        }, null, 8, ["isSelected"])) : Vue.createCommentVNode("", true),
        Vue.createElementVNode("div", {
          class: Vue.normalizeClass({
            "control-reverse": Vue.unref(message).flow === "out"
          })
        }, [
          Vue.createElementVNode("div", _hoisted_1, [
            Vue.createElementVNode("div", {
              class: Vue.normalizeClass(["message-bubble-main-content", [Vue.unref(message).flow === "in" ? "" : "reverse"]])
            }, [
              Vue.createVNode(index$1.default, {
                useSkeletonAnimation: "",
                url: Vue.unref(message).avatar || ""
              }, null, 8, ["url"]),
              Vue.createElementVNode("main", {
                class: "message-body",
                onClick: _cache[1] || (_cache[1] = Vue.withModifiers(() => {
                }, ["stop"]))
              }, [
                Vue.unref(message).flow === "in" && Vue.unref(message).conversationType === "GROUP" ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_2, Vue.toDisplayString(props.content.showName), 1)) : Vue.createCommentVNode("", true),
                Vue.createElementVNode("div", {
                  class: Vue.normalizeClass(["message-body-main", Vue.unref(message).flow === "out" && "message-body-main-reverse"])
                }, [
                  Vue.createElementVNode("div", {
                    class: Vue.normalizeClass([
                      "blink",
                      "message-body-content",
                      Vue.unref(message).flow === "out" ? "content-out" : "content-in",
                      Vue.unref(message).hasRiskContent && "content-has-risk",
                      Vue.unref(isNoPadding) ? "content-no-padding" : "",
                      Vue.unref(isNoPadding) && Vue.unref(isBlink) ? "blink-shadow" : "",
                      !Vue.unref(isNoPadding) && Vue.unref(isBlink) ? "blink-content" : ""
                    ])
                  }, [
                    Vue.createElementVNode("div", _hoisted_3, [
                      (Vue.unref(message).type === Vue.unref(TYPES).MSG_IMAGE || Vue.unref(message).type === Vue.unref(TYPES).MSG_VIDEO) && Vue.unref(message).hasRiskContent ? (Vue.openBlock(), Vue.createElementBlock("img", {
                        key: 0,
                        class: Vue.normalizeClass(["message-risk-replace", !Vue.unref(env.isPC) && "message-risk-replace-h5"]),
                        src: riskImageReplaceUrl
                      }, null, 2)) : (Vue.openBlock(), Vue.createElementBlock(Vue.Fragment, { key: 1 }, [
                        Vue.renderSlot(_ctx.$slots, "messageElement", {}, void 0, true),
                        Vue.renderSlot(_ctx.$slots, "TUIEmojiPlugin", {}, void 0, true)
                      ], 64))
                    ]),
                    Vue.unref(message).hasRiskContent ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_4, Vue.toDisplayString(Vue.unref(riskContentText)), 1)) : Vue.createCommentVNode("", true)
                  ], 2),
                  Vue.unref(isDisplayUnplayMark) ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_5)) : Vue.createCommentVNode("", true),
                  Vue.unref(message).status === "fail" || Vue.unref(message).hasRiskContent ? (Vue.openBlock(), Vue.createElementBlock("div", {
                    key: 1,
                    class: "message-label fail",
                    onClick: _cache[0] || (_cache[0] = ($event) => resendMessage())
                  }, " ! ")) : Vue.createCommentVNode("", true),
                  Vue.unref(message).status === "unSend" && needLoadingIconMessageType.includes(Vue.unref(message).type) ? (Vue.openBlock(), Vue.createBlock(Icon.default, {
                    key: 2,
                    class: "message-label loading-circle",
                    file: Vue.unref(loading.default),
                    width: "15px",
                    height: "15px"
                  }, null, 8, ["file"])) : Vue.createCommentVNode("", true),
                  Vue.createVNode(index$2.default, {
                    class: "message-label align-self-bottom",
                    message: Vue.unref(utils.shallowCopyMessage)(Vue.unref(message)),
                    onOpenReadUserPanel: openReadUserPanel
                  }, null, 8, ["message"])
                ], 2)
              ])
            ], 2),
            Vue.createElementVNode("div", _hoisted_6, [
              Vue.createVNode(index$3.default, {
                class: Vue.normalizeClass(Vue.unref(message).flow === "out" ? "reverse" : "flex-row"),
                message: Vue.unref(message)
              }, null, 8, ["class", "message"]),
              Vue.createVNode(index$4.default, {
                class: Vue.normalizeClass(Vue.unref(message).flow === "out" ? "reverse" : "flex-row"),
                message: Vue.unref(message)
              }, null, 8, ["class", "message"]),
              Vue.createVNode(index$5.default, {
                class: Vue.normalizeClass(Vue.unref(message).flow === "out" ? "reverse" : "flex-row"),
                message: Vue.unref(message),
                onBlinkMessage: blinkMessage,
                onScrollTo: scrollTo
              }, null, 8, ["class", "message"])
            ])
          ])
        ], 2)
      ], 2);
    };
  }
});
exports.default = _sfc_main;
