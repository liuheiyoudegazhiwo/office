"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../../adapter-vue.js");
const utils = require("../../utils/utils.js");
const Icon = require("../../../common/Icon.vue.js");
const iconClose = require("../../../../assets/icon/icon-close.svg.js");
const env = require("../../../../utils/env.js");
const _hoisted_1 = { class: "message-video" };
const _hoisted_2 = ["src"];
const _hoisted_3 = ["src", "poster"];
const _hoisted_4 = ["src", "poster"];
const _hoisted_5 = {
  key: 0,
  class: "dialog-video"
};
const _hoisted_6 = ["src"];
const transparentPosterUrl = "https://web.sdk.qcloud.com/im/assets/images/transparent.png";
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "message-video",
  props: {
    content: { default: () => ({}) },
    messageItem: { default: () => ({}) }
  },
  emits: ["uploading"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const isShow = Vue.ref(false);
    const poster = Vue.ref("");
    const posterWidth = Vue.ref(0);
    const posterHeight = Vue.ref(0);
    const skeleton = Vue.ref();
    const videoRef = Vue.ref();
    Vue.watchEffect(async () => {
      if (!props.content) return;
      poster.value = await handlePosterUrl(props.content, props.messageItem);
      Vue.nextTick(async () => {
        var _a, _b, _c, _d, _e;
        const containerWidth = ((_a = document.getElementById("messageScrollList")) == null ? void 0 : _a.clientWidth) || 0;
        const max = !env.isPC ? Math.min(containerWidth - 172, 300) : 300;
        let size;
        if (props.messageItem.status === "success") {
          let { snapshotWidth = 0, snapshotHeight = 0 } = props.content;
          const { snapshotUrl } = props.content;
          if (snapshotWidth === 0 || snapshotHeight === 0) return;
          if (snapshotUrl === transparentPosterUrl) {
            snapshotWidth = posterWidth.value;
            snapshotHeight = posterHeight.value;
          }
          size = utils.handleSkeletonSize(snapshotWidth, snapshotHeight, max, max);
          ((_b = skeleton == null ? void 0 : skeleton.value) == null ? void 0 : _b.style) && (skeleton.value.style.width = `${size.width}px`);
          ((_c = skeleton == null ? void 0 : skeleton.value) == null ? void 0 : _c.style) && (skeleton.value.style.height = `${size.height}px`);
          if (env.isPC) {
            ((_d = videoRef == null ? void 0 : videoRef.value) == null ? void 0 : _d.style) && (videoRef.value.style.width = `${size.width}px`);
            ((_e = videoRef == null ? void 0 : videoRef.value) == null ? void 0 : _e.style) && (videoRef.value.style.height = `${size.height}px`);
          }
        } else {
          emits("uploading");
        }
      });
    });
    const isWidth = Vue.computed(() => {
      const { snapshotWidth = 0, snapshotHeight = 0 } = props.messageItem.payload;
      return snapshotWidth >= snapshotHeight;
    });
    Vue.watch(() => props.messageItem.status, (newVal, oldVal) => {
      if (newVal === "success" && oldVal !== "success") {
        emits("uploading");
      }
    });
    function toggleVideoPreviewer() {
      if (props.messageItem.progress > 0 && props.messageItem.progress < 1) {
        return;
      }
      isShow.value = !isShow.value;
    }
    function getVideoBase64(url) {
      return new Promise((resolve) => {
        let dataURL = "";
        const video = document.createElement("video");
        video.setAttribute("crossOrigin", "anonymous");
        video.setAttribute("src", url);
        video.setAttribute("preload", "auto");
        video.addEventListener(
          "loadeddata",
          function() {
            const canvas = document.createElement("canvas"), width = video.videoWidth, height = video.videoHeight;
            canvas.width = width;
            canvas.height = height;
            canvas.getContext("2d").drawImage(video, 0, 0, width, height);
            dataURL = canvas.toDataURL("image/jpeg");
            posterWidth.value = width;
            posterHeight.value = height;
            resolve(dataURL);
          },
          { once: true }
        );
      });
    }
    async function handlePosterUrl(messgeContent, messageItem) {
      var _a, _b, _c, _d;
      if (!messageItem) return "";
      if (messageItem.status !== "success") {
        return await getVideoBase64(messgeContent.url);
      } else {
        return messgeContent.snapshotUrl !== transparentPosterUrl && messgeContent.snapshotUrl || ((_a = messageItem == null ? void 0 : messageItem.payload) == null ? void 0 : _a.snapshotUrl) !== transparentPosterUrl && ((_b = messageItem == null ? void 0 : messageItem.payload) == null ? void 0 : _b.snapshotUrl) || ((_c = messageItem.payload) == null ? void 0 : _c.thumbUrl) !== transparentPosterUrl && ((_d = messageItem == null ? void 0 : messageItem.payload) == null ? void 0 : _d.thumbUrl) || await getVideoBase64(messgeContent.url);
      }
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
        Vue.createElementVNode("div", {
          ref_key: "skeleton",
          ref: skeleton,
          class: Vue.normalizeClass(["message-video-box", [
            (!props.messageItem.progress || props.messageItem.progress === 1) && !Vue.unref(env.isPC) && "message-video-cover"
          ]]),
          onClick: toggleVideoPreviewer
        }, [
          props.messageItem.progress > 0 && props.messageItem.progress < 1 && Vue.unref(poster) || !Vue.unref(env.isPC) && Vue.unref(poster) ? (Vue.openBlock(), Vue.createElementBlock("img", {
            key: 0,
            class: Vue.normalizeClass(["message-img", [Vue.unref(isWidth) ? "is-width" : "is-height"]]),
            src: Vue.unref(poster)
          }, null, 10, _hoisted_2)) : !Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createElementBlock("video", {
            key: 1,
            ref_key: "videoRef",
            ref: videoRef,
            class: "message-img video-h5-uploading",
            src: props.content.url + "#t=0.1",
            poster: props.content.url,
            preload: "auto",
            muted: ""
          }, null, 8, _hoisted_3)) : (Vue.openBlock(), Vue.createElementBlock("video", {
            key: 2,
            ref_key: "videoRef",
            ref: videoRef,
            class: "message-img video-web",
            src: props.content.url,
            controls: "",
            preload: "metadata",
            poster: Vue.unref(poster)
          }, null, 8, _hoisted_4))
        ], 2),
        Vue.unref(isShow) && !Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_5, [
          Vue.createElementVNode("div", {
            class: "dialog-video-close",
            onClick: Vue.withModifiers(toggleVideoPreviewer, ["stop"])
          }, [
            Vue.createVNode(Icon.default, { file: Vue.unref(iconClose.default) }, null, 8, ["file"])
          ]),
          Vue.createElementVNode("div", {
            class: Vue.normalizeClass(["dialog-video-box", [!Vue.unref(env.isPC) ? "dialog-video-h5" : ""]]),
            onClick: Vue.withModifiers(toggleVideoPreviewer, ["self"])
          }, [
            Vue.createElementVNode("video", {
              class: Vue.normalizeClass([Vue.unref(isWidth) ? "is-width" : "is-height"]),
              src: props.content.url,
              controls: "",
              autoplay: ""
            }, null, 10, _hoisted_6)
          ], 2)
        ])) : Vue.createCommentVNode("", true)
      ]);
    };
  }
});
exports.default = _sfc_main;
