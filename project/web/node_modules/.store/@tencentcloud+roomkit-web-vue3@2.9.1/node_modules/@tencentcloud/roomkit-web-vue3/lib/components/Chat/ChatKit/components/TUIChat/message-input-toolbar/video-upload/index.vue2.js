"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const universalApi = require("@tencentcloud/universal-api");
require("../../../../adapter-vue.js");
const env = require("../../../../utils/env.js");
const index = require("../toolbar-item-container/index.vue.js");
const videoLight = require("../../../../assets/icon/video-light.svg.js");
const videoDark = require("../../../../assets/icon/video-dark.svg.js");
const videoUni = require("../../../../assets/icon/video-uni.png.js");
const cameraUni = require("../../../../assets/icon/camera-uni.png.js");
const utils = require("../../utils/utils.js");
const index$1 = require("../../offlinePushInfoManager/index.js");
const config = require("../../config.js");
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    // Video source, only valid for uni-app version, web version only supports selecting videos from files
    // album: Select from files
    // camera: Take a video using the camera
    videoSourceType: {
      type: String,
      default: "album"
    }
  },
  setup(__props) {
    const props = __props;
    const inputRef = Vue.ref();
    const currentConversation = Vue.ref();
    TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.CONV, {
      currentConversation: (conversation) => {
        currentConversation.value = conversation;
      }
    });
    const handleIcon = () => {
      if (env.isUniFrameWork) {
        switch (props.videoSourceType) {
          case "album":
            return videoUni.default;
          case "camera":
            return cameraUni.default;
          default:
            return videoUni.default;
        }
      } else {
        const videoIcon = config.default.getTheme() === "dark" ? videoDark.default : videoLight.default;
        return videoIcon;
      }
    };
    const handleTitle = () => {
      if (env.isUniFrameWork && props.videoSourceType === "camera") {
        return "录制";
      } else {
        return "视频";
      }
    };
    const onIconClick = () => {
      var _a, _b, _c, _d, _e;
      if (env.isUniFrameWork) {
        if (env.isWeChat && ((_a = universalApi.TUIGlobal) == null ? void 0 : _a.chooseMedia)) {
          (_b = universalApi.TUIGlobal) == null ? void 0 : _b.chooseMedia({
            mediaType: ["video"],
            count: 1,
            sourceType: [props.videoSourceType],
            maxDuration: 60,
            success: function(res) {
              sendVideoMessage(res);
            }
          });
        } else {
          (_c = universalApi.TUIGlobal) == null ? void 0 : _c.chooseVideo({
            count: 1,
            sourceType: [props.videoSourceType],
            compressed: false,
            success: function(res) {
              sendVideoMessage(res);
            }
          });
        }
      } else {
        ((_d = inputRef == null ? void 0 : inputRef.value) == null ? void 0 : _d.click) && ((_e = inputRef == null ? void 0 : inputRef.value) == null ? void 0 : _e.click());
      }
    };
    const sendVideoInWeb = (e) => {
      var _a, _b;
      if (((_b = (_a = e == null ? void 0 : e.target) == null ? void 0 : _a.files) == null ? void 0 : _b.length) <= 0) {
        return;
      }
      sendVideoMessage(e == null ? void 0 : e.target);
      e.target.value = "";
    };
    const sendVideoMessage = (file) => {
      var _a, _b, _c, _d, _e;
      if (!file) {
        return;
      }
      const options = {
        to: ((_b = (_a = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a.groupProfile) == null ? void 0 : _b.groupID) || ((_d = (_c = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c.userProfile) == null ? void 0 : _d.userID),
        conversationType: (_e = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _e.type,
        payload: {
          file
        },
        needReadReceipt: utils.isEnabledMessageReadReceiptGlobal()
      };
      const offlinePushInfoCreateParams = {
        conversation: currentConversation.value,
        payload: options.payload,
        messageType: TUIChatEngine.TYPES.MSG_VIDEO
      };
      const sendMessageOptions = {
        offlinePushInfo: index$1.default.create(offlinePushInfoCreateParams)
      };
      TUIChatEngine.TUIChatService.sendVideoMessage(options, sendMessageOptions);
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(index.default, {
        iconFile: handleIcon(),
        title: handleTitle(),
        needDialog: false,
        iconWidth: Vue.unref(env.isUniFrameWork) ? "32px" : "20px",
        iconHeight: Vue.unref(env.isUniFrameWork) ? props.videoSourceType === "album" ? "20px" : "25px" : "18px",
        onOnIconClick: onIconClick
      }, {
        default: Vue.withCtx(() => [
          Vue.createElementVNode("div", {
            class: Vue.normalizeClass(["video-upload", !Vue.unref(env.isPC) && "video-upload-h5"])
          }, [
            Vue.createElementVNode("input", {
              ref_key: "inputRef",
              ref: inputRef,
              title: "视频",
              type: "file",
              "data-type": "video",
              accept: "video/*",
              onChange: sendVideoInWeb
            }, null, 544)
          ], 2)
        ]),
        _: 1
      }, 8, ["iconFile", "title", "iconWidth", "iconHeight"]);
    };
  }
});
exports.default = _sfc_main;
