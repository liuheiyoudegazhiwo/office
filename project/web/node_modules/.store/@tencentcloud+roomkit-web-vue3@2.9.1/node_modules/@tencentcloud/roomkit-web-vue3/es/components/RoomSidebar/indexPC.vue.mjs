import { defineComponent, createElementBlock, openBlock, createVNode, unref, isRef, withCtx, createBlock, createCommentVNode } from "vue";
import Drawer from "../common/base/Drawer.vue.mjs";
import useSideBar from "./useSideBarHooks.mjs";
import index from "../ManageMember/index.mjs";
import Index$1 from "../RoomMore/index.mjs";
import Index from "../Chat/index/index.mjs";
import AITranscription from "../common/widgets/AITools/AITranscription.vue.mjs";
const _hoisted_1 = { class: "sidebar-container" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "indexPC",
  setup(__props) {
    const { isSidebarOpen, title, handleClose, sidebarName } = useSideBar();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(Drawer, {
          modelValue: unref(isSidebarOpen),
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(isSidebarOpen) ? isSidebarOpen.value = $event : null),
          modal: false,
          title: unref(title),
          "before-close": unref(handleClose),
          size: 400
        }, {
          default: withCtx(() => [
            unref(sidebarName) == "chat" ? (openBlock(), createBlock(unref(Index), { key: 0 })) : createCommentVNode("", true),
            unref(sidebarName) == "more" ? (openBlock(), createBlock(unref(Index$1), { key: 1 })) : createCommentVNode("", true),
            unref(sidebarName) == "manage-member" ? (openBlock(), createBlock(unref(index), { key: 2 })) : createCommentVNode("", true),
            unref(sidebarName) == "aiTranscription" ? (openBlock(), createBlock(AITranscription, { key: 3 })) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["modelValue", "title", "before-close"])
      ]);
    };
  }
});
export {
  _sfc_main as default
};
