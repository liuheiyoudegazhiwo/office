"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const emojiPC = require("../EditorTools/emojiPC.vue.js");
const useChatEditor = require("./useChatEditor.js");
const _hoisted_1 = { class: "input-content" };
const _hoisted_2 = ["disabled", "placeholder"];
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "ChatEditorH5",
  setup(__props) {
    const {
      t,
      editorInputEle,
      sendMsg,
      isMessageDisabled,
      sendMessage,
      handleChooseEmoji
    } = useChatEditor.default();
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", {
        class: Vue.normalizeClass(["chat-editor", { disable: Vue.unref(isMessageDisabled) }])
      }, [
        Vue.createElementVNode("div", _hoisted_1, [
          Vue.createVNode(Vue.unref(emojiPC.default), {
            class: "chat-emoji",
            onChooseEmoji: Vue.unref(handleChooseEmoji)
          }, null, 8, ["onChooseEmoji"]),
          Vue.withDirectives(Vue.createElementVNode("input", {
            ref_key: "editorInputEle",
            ref: editorInputEle,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => Vue.isRef(sendMsg) ? sendMsg.value = $event : null),
            type: "text",
            disabled: Vue.unref(isMessageDisabled),
            class: "content-bottom-input",
            placeholder: Vue.unref(isMessageDisabled) ? Vue.unref(t)("Muted by the moderator") : Vue.unref(t)("Type a message"),
            enterkeyhint: "send",
            onKeyup: _cache[1] || (_cache[1] = Vue.withKeys(
              //@ts-ignore
              (...args) => Vue.unref(sendMessage) && Vue.unref(sendMessage)(...args),
              ["enter"]
            ))
          }, null, 40, _hoisted_2), [
            [Vue.vModelText, Vue.unref(sendMsg)]
          ])
        ])
      ], 2);
    };
  }
});
exports.default = _sfc_main;
