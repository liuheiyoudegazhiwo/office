"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../../adapter-vue.js");
const Icon = require("../../../common/Icon.vue.js");
const msgAudio = require("../../../../assets/icon/msg-audio.svg.js");
const env = require("../../../../utils/env.js");
const _hoisted_1 = { class: "audio-icon-container" };
const _hoisted_2 = ["src"];
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "message-audio",
  props: {
    content: {
      type: Object,
      default: () => ({})
    },
    messageItem: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["setAudioPlayed"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const props = __props;
    const data = Vue.ref();
    const message = Vue.ref();
    const isAudioPlaying = Vue.ref();
    const audioRef = Vue.ref();
    Vue.onMounted(() => {
      if (audioRef.value) {
        audioRef.value.addEventListener("ended", onAudioEnded);
        audioRef.value.addEventListener("pause", onAudioPaused);
      }
    });
    Vue.onUnmounted(() => {
      if (audioRef.value) {
        audioRef.value.removeEventListener("ended", onAudioEnded);
        audioRef.value.removeEventListener("pause", onAudioPaused);
      }
    });
    Vue.watchEffect(() => {
      message.value = props.messageItem;
      data.value = props.content;
    });
    function play() {
      if (message.value.hasRiskContent || !audioRef.value) {
        return;
      }
      if (!audioRef.value.paused) {
        audioRef.value.pause();
        audioRef.value.currentTime = 0;
        isAudioPlaying.value = false;
        return;
      }
      const audios = document.getElementsByTagName("audio");
      Array.from(audios).forEach((audio) => {
        if (!audio.paused) {
          audio.pause();
          audio.currentTime = 0;
        }
      });
      audioRef.value.play();
      isAudioPlaying.value = true;
      if (message.value.flow === "in") {
        emits("setAudioPlayed", message.value.ID);
      }
    }
    function onAudioEnded() {
      isAudioPlaying.value = false;
    }
    function onAudioPaused() {
      isAudioPlaying.value = false;
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", {
        class: Vue.normalizeClass(["message-audio", [
          Vue.unref(env.isMobile) && "message-audio-h5",
          Vue.unref(message).flow === "out" && "reserve",
          Vue.unref(message).hasRiskContent && "disable"
        ]]),
        onClick: Vue.withModifiers(play, ["stop"])
      }, [
        Vue.createElementVNode("div", _hoisted_1, [
          Vue.createElementVNode("div", {
            class: Vue.normalizeClass({ "mask": true, "play": Vue.unref(isAudioPlaying) })
          }, null, 2),
          Vue.createVNode(Icon.default, {
            class: "icon",
            width: "16px",
            height: "20px",
            file: Vue.unref(msgAudio.default)
          }, null, 8, ["file"])
        ]),
        Vue.createElementVNode("span", {
          class: "time",
          style: Vue.normalizeStyle({ width: `${Vue.unref(data).second * 10 + 20}px` })
        }, Vue.toDisplayString(Vue.unref(data).second || 1) + ' " ', 5),
        Vue.createElementVNode("audio", {
          ref_key: "audioRef",
          ref: audioRef,
          src: Vue.unref(data).url
        }, null, 8, _hoisted_2)
      ], 2);
    };
  }
});
exports.default = _sfc_main;
