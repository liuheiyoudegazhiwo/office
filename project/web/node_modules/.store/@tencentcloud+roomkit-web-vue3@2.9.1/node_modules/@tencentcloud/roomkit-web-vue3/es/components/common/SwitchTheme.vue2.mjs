import { defineComponent, ref, withDirectives, createElementBlock, openBlock, createBlock, createCommentVNode, unref, createElementVNode, toDisplayString } from "vue";
import IconButton from "./base/IconButton.vue.mjs";
import SwitchThemeIcon from "./icons/SwitchThemeIcon.vue.mjs";
import { IconButtonLayout } from "../../constants/room.mjs";
import { useI18n } from "../../locales/index.mjs";
import "../../services/main.mjs";
import { roomService } from "../../services/roomService.mjs";
import "@tencentcloud/tuiroom-engine-js";
import { isMobile } from "../../utils/environment.mjs";
import "mitt";
import "../../services/manager/roomActionManager.mjs";
import "@tencentcloud/tui-core";
import { useBasicStore } from "../../stores/basic.mjs";
import { useUIKit } from "@tencentcloud/uikit-base-component-vue3";
import vClickOutside from "../../directives/vClickOutside.mjs";
const _hoisted_1 = { class: "theme-container" };
const _hoisted_2 = {
  key: 1,
  class: "switch-theme-container"
};
const _hoisted_3 = { class: "switch-theme-item" };
const _hoisted_4 = { class: "color-blocks two-blocks" };
const _hoisted_5 = { class: "switch-theme-item" };
const _hoisted_6 = { class: "color-blocks four-blocks" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "SwitchTheme",
  props: {
    visible: { type: Boolean, default: true }
  },
  setup(__props) {
    const { t } = useI18n();
    const basicStore = useBasicStore();
    const { theme, setTheme } = useUIKit();
    const isShowThemeColorContainer = ref(false);
    const switchThemeConfig = roomService.getComponentConfig("SwitchTheme");
    function handleSwitchTheme() {
      if (!isMobile) {
        isShowThemeColorContainer.value = !isShowThemeColorContainer.value;
        return;
      }
      const currentTheme = theme.value || basicStore.defaultTheme;
      const newTheme = currentTheme === "light" ? "dark" : "light";
      if (theme.value) {
        setTheme(newTheme);
      } else {
        roomService.setTheme(newTheme);
      }
    }
    function toggleCustomTheme(newTheme) {
      if (!theme.value) {
        roomService.setTheme(newTheme);
        return;
      }
      const isBaseTheme = newTheme === "light" || newTheme === "dark";
      const themeConfig = isBaseTheme ? newTheme : { themeStyle: theme.value, primaryColor: newTheme };
      setTheme(themeConfig);
    }
    function handleClickOutSide() {
      if (isShowThemeColorContainer.value) {
        isShowThemeColorContainer.value = false;
      }
    }
    return (_ctx, _cache) => {
      return withDirectives((openBlock(), createElementBlock("div", _hoisted_1, [
        _ctx.visible && unref(switchThemeConfig).visible ? (openBlock(), createBlock(IconButton, {
          key: 0,
          title: unref(t)("Switch Theme"),
          layout: unref(IconButtonLayout).HORIZONTAL,
          icon: SwitchThemeIcon,
          onClickIcon: handleSwitchTheme
        }, null, 8, ["title", "layout"])) : createCommentVNode("", true),
        isShowThemeColorContainer.value && !unref(isMobile) ? (openBlock(), createElementBlock("div", _hoisted_2, [
          createElementVNode("div", _hoisted_3, [
            createElementVNode("span", null, toDisplayString(unref(t)("Theme Colours")), 1),
            createElementVNode("div", _hoisted_4, [
              createElementVNode("div", {
                class: "color-block black",
                onClick: _cache[0] || (_cache[0] = ($event) => toggleCustomTheme("dark"))
              }),
              createElementVNode("div", {
                class: "color-block white",
                onClick: _cache[1] || (_cache[1] = ($event) => toggleCustomTheme("light"))
              })
            ])
          ]),
          createElementVNode("div", _hoisted_5, [
            createElementVNode("span", null, toDisplayString(unref(t)("Custom Themes")), 1),
            createElementVNode("div", _hoisted_6, [
              createElementVNode("div", {
                class: "color-block theme",
                onClick: _cache[2] || (_cache[2] = ($event) => toggleCustomTheme("theme"))
              }),
              createElementVNode("div", {
                class: "color-block green",
                onClick: _cache[3] || (_cache[3] = ($event) => toggleCustomTheme("green"))
              }),
              createElementVNode("div", {
                class: "color-block red",
                onClick: _cache[4] || (_cache[4] = ($event) => toggleCustomTheme("red"))
              }),
              createElementVNode("div", {
                class: "color-block orange",
                onClick: _cache[5] || (_cache[5] = ($event) => toggleCustomTheme("orange"))
              })
            ])
          ])
        ])) : createCommentVNode("", true)
      ])), [
        [unref(vClickOutside), handleClickOutSide]
      ]);
    };
  }
});
export {
  _sfc_main as default
};
