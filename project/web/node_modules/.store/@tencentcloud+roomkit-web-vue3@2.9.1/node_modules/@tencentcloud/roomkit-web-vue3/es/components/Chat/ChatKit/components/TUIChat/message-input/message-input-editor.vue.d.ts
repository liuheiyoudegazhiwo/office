import { ITipTapEditorContent } from '../../../interface';

declare function insertAt(atInfo: {
    id: string;
    label: string;
}): void;
declare function getEditorContent(): ITipTapEditorContent[] | {
    type: string;
    payload: {
        text: string;
        atUserList: string[];
    };
}[];
declare function addEmoji(emojiData: any): void;
declare function blur(): void;
declare function resetEditor(): void;
declare function getEditorHTML(): string;
declare function setEditorContent(content: any): void;
declare function insertEditorContent(content: Array<{
    type: 'text' | 'image';
    content: string;
    emojiKey?: string;
}>): void;
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    replayOrReferenceMessage: {
        type: ObjectConstructor;
        default: () => {};
    };
    isMuted: {
        type: BooleanConstructor;
        default: boolean;
    };
    muteText: {
        type: StringConstructor;
        default: string;
    };
    enableInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    enableAt: {
        type: BooleanConstructor;
        default: boolean;
    };
    enableDragUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    enableTyping: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {
    getEditorContent: typeof getEditorContent;
    addEmoji: typeof addEmoji;
    resetEditor: typeof resetEditor;
    insertAt: typeof insertAt;
    setEditorContent: typeof setEditorContent;
    getEditorHTML: typeof getEditorHTML;
    insertEditorContent: typeof insertEditorContent;
    blur: typeof blur;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    sendMessage: (...args: any[]) => void;
    onTyping: (...args: any[]) => void;
    onAt: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    replayOrReferenceMessage: {
        type: ObjectConstructor;
        default: () => {};
    };
    isMuted: {
        type: BooleanConstructor;
        default: boolean;
    };
    muteText: {
        type: StringConstructor;
        default: string;
    };
    enableInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    enableAt: {
        type: BooleanConstructor;
        default: boolean;
    };
    enableDragUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    enableTyping: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    onSendMessage?: ((...args: any[]) => any) | undefined;
    onOnTyping?: ((...args: any[]) => any) | undefined;
    onOnAt?: ((...args: any[]) => any) | undefined;
}>, {
    placeholder: string;
    isMuted: boolean;
    replayOrReferenceMessage: Record<string, any>;
    muteText: string;
    enableInput: boolean;
    enableAt: boolean;
    enableDragUpload: boolean;
    enableTyping: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
