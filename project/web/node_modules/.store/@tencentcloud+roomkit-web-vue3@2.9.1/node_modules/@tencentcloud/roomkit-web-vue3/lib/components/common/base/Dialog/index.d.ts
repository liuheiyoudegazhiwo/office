declare const Dialog: ({
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        title: {
            type: import('vue').PropType<string>;
            default: string;
        };
        modelValue: {
            type: import('vue').PropType<boolean>;
            required: true;
            default: boolean;
        };
        confirmButton: {
            type: import('vue').PropType<string>;
            default: string;
        };
        cancelButton: {
            type: import('vue').PropType<string>;
            default: string;
        };
        closeOnClickModal: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        appendToBody: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        appendToRoomContainer: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        modal: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        onCancel?: ((...args: any[]) => any) | undefined;
        onConfirm?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        cancel: (...args: any[]) => void;
        confirm: (...args: any[]) => void;
        close: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        title: string;
        modelValue: boolean;
        confirmButton: string;
        cancelButton: string;
        closeOnClickModal: boolean;
        appendToBody: boolean;
        appendToRoomContainer: boolean;
        modal: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        title: {
            type: import('vue').PropType<string>;
            default: string;
        };
        modelValue: {
            type: import('vue').PropType<boolean>;
            required: true;
            default: boolean;
        };
        confirmButton: {
            type: import('vue').PropType<string>;
            default: string;
        };
        cancelButton: {
            type: import('vue').PropType<string>;
            default: string;
        };
        closeOnClickModal: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        appendToBody: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        appendToRoomContainer: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        modal: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        onCancel?: ((...args: any[]) => any) | undefined;
        onConfirm?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        title: string;
        modelValue: boolean;
        confirmButton: string;
        cancelButton: string;
        closeOnClickModal: boolean;
        appendToBody: boolean;
        appendToRoomContainer: boolean;
        modal: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    title: {
        type: import('vue').PropType<string>;
        default: string;
    };
    modelValue: {
        type: import('vue').PropType<boolean>;
        required: true;
        default: boolean;
    };
    confirmButton: {
        type: import('vue').PropType<string>;
        default: string;
    };
    cancelButton: {
        type: import('vue').PropType<string>;
        default: string;
    };
    closeOnClickModal: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    appendToBody: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    appendToRoomContainer: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    modal: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
}>> & Readonly<{
    onCancel?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    cancel: (...args: any[]) => void;
    confirm: (...args: any[]) => void;
    close: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
}, string, {
    title: string;
    modelValue: boolean;
    confirmButton: string;
    cancelButton: string;
    closeOnClickModal: boolean;
    appendToBody: boolean;
    appendToRoomContainer: boolean;
    modal: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        title: {
            type: import('vue').PropType<string>;
            default: string;
        };
        width: {
            type: import('vue').PropType<string | number>;
            default: undefined;
        };
        modelValue: {
            type: import('vue').PropType<boolean>;
            required: true;
            default: boolean;
        };
        confirmButton: {
            type: import('vue').PropType<string>;
            default: string;
        };
        cancelButton: {
            type: import('vue').PropType<string>;
            default: string;
        };
        closeOnClickModal: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        appendToBody: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        appendToRoomContainer: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        modal: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        beforeClose: {
            type: import('vue').PropType<((done: () => void) => void) | null>;
            default: null;
        };
        showClose: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        titleIcon: {
            type: import('vue').PropType<any>;
            default: null;
        };
    }>> & Readonly<{
        onCancel?: ((...args: any[]) => any) | undefined;
        onConfirm?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        cancel: (...args: any[]) => void;
        confirm: (...args: any[]) => void;
        close: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        title: string;
        width: string | number;
        modelValue: boolean;
        confirmButton: string;
        cancelButton: string;
        closeOnClickModal: boolean;
        appendToBody: boolean;
        appendToRoomContainer: boolean;
        modal: boolean;
        beforeClose: ((done: () => void) => void) | null;
        showClose: boolean;
        titleIcon: any;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        title: {
            type: import('vue').PropType<string>;
            default: string;
        };
        width: {
            type: import('vue').PropType<string | number>;
            default: undefined;
        };
        modelValue: {
            type: import('vue').PropType<boolean>;
            required: true;
            default: boolean;
        };
        confirmButton: {
            type: import('vue').PropType<string>;
            default: string;
        };
        cancelButton: {
            type: import('vue').PropType<string>;
            default: string;
        };
        closeOnClickModal: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        appendToBody: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        appendToRoomContainer: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        modal: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        beforeClose: {
            type: import('vue').PropType<((done: () => void) => void) | null>;
            default: null;
        };
        showClose: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        titleIcon: {
            type: import('vue').PropType<any>;
            default: null;
        };
    }>> & Readonly<{
        onCancel?: ((...args: any[]) => any) | undefined;
        onConfirm?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        title: string;
        width: string | number;
        modelValue: boolean;
        confirmButton: string;
        cancelButton: string;
        closeOnClickModal: boolean;
        appendToBody: boolean;
        appendToRoomContainer: boolean;
        modal: boolean;
        beforeClose: ((done: () => void) => void) | null;
        showClose: boolean;
        titleIcon: any;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    title: {
        type: import('vue').PropType<string>;
        default: string;
    };
    width: {
        type: import('vue').PropType<string | number>;
        default: undefined;
    };
    modelValue: {
        type: import('vue').PropType<boolean>;
        required: true;
        default: boolean;
    };
    confirmButton: {
        type: import('vue').PropType<string>;
        default: string;
    };
    cancelButton: {
        type: import('vue').PropType<string>;
        default: string;
    };
    closeOnClickModal: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    appendToBody: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    appendToRoomContainer: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    modal: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    beforeClose: {
        type: import('vue').PropType<((done: () => void) => void) | null>;
        default: null;
    };
    showClose: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    titleIcon: {
        type: import('vue').PropType<any>;
        default: null;
    };
}>> & Readonly<{
    onCancel?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    cancel: (...args: any[]) => void;
    confirm: (...args: any[]) => void;
    close: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
}, string, {
    title: string;
    width: string | number;
    modelValue: boolean;
    confirmButton: string;
    cancelButton: string;
    closeOnClickModal: boolean;
    appendToBody: boolean;
    appendToRoomContainer: boolean;
    modal: boolean;
    beforeClose: ((done: () => void) => void) | null;
    showClose: boolean;
    titleIcon: any;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        title?(_: {}): any;
        default?(_: {}): any;
        footer?(_: {}): any;
    };
}));
export default Dialog;
