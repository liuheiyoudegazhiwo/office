"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const Icon = require("../../../common/Icon.vue.js");
const index$1 = require("../../../common/Avatar/index.vue.js");
const index = require("../../../common/Drawer/index.vue.js");
const closeDark = require("../../../../assets/icon/close-dark.svg.js");
const env = require("../../../../utils/env.js");
const _hoisted_1 = {
  key: 0,
  class: "application-tips"
};
const _hoisted_2 = {
  class: /* @__PURE__ */ Vue.normalizeClass({
    "application-contaienr": true
  })
};
const _hoisted_3 = { class: "application-header" };
const _hoisted_4 = { key: 1 };
const _hoisted_5 = { class: "application-item-info" };
const _hoisted_6 = { class: "application-item-nick" };
const _hoisted_7 = { class: "application-item-note" };
const _hoisted_8 = { class: "application-item-operation" };
const _hoisted_9 = ["onClick"];
const _hoisted_10 = ["onClick"];
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    groupID: { default: "" }
  },
  setup(__props) {
    const props = __props;
    const drawerDomInstanceRef = Vue.ref();
    const groupApplicationCount = Vue.ref(0);
    const isGroupApplicationDrawerShow = Vue.ref(false);
    const customGroupApplicationList = Vue.ref([]);
    Vue.watch(isGroupApplicationDrawerShow, (newVal) => {
      if (newVal) {
        generateCustomGroupApplicationList().then((list) => {
          customGroupApplicationList.value = list;
          groupApplicationCount.value = list.length;
        });
      }
    });
    Vue.watch(() => customGroupApplicationList.value.length, (newVal, oldVal) => {
      if (oldVal > 0 && newVal === 0) {
        isGroupApplicationDrawerShow.value = false;
      }
    });
    async function getCurrentGroupApplicationList() {
      const result = await TUIChatEngine.TUIGroupService.getGroupApplicationList();
      const currentGroupApplicationList = result.data.applicationList.filter((application) => application.groupID === props.groupID);
      return currentGroupApplicationList;
    }
    function toggleGroupApplicationDrawerShow() {
      isGroupApplicationDrawerShow.value = !isGroupApplicationDrawerShow.value;
    }
    async function generateCustomGroupApplicationList() {
      const applicationList = await getCurrentGroupApplicationList();
      if (applicationList.length === 0) {
        return [];
      }
      const userIDList = applicationList.map((application) => application.applicationType === 0 ? application.applicant : application.userID);
      const { data: userProfileList } = await TUIChatEngine.TUIUserService.getUserProfile({ userIDList });
      const mappingFromUserID2Profile = {};
      userProfileList.forEach((profile) => {
        mappingFromUserID2Profile[profile.userID] = profile;
      });
      const groupApplicationList = applicationList.map((application) => {
        const profile = mappingFromUserID2Profile[application.applicationType === 0 ? application.applicant : application.userID];
        return {
          nick: profile.nick || profile.userID || "anonymous",
          avatar: profile.avatar || "",
          isRemoved: false,
          application
        };
      });
      return groupApplicationList;
    }
    function handleApplication(customApplication, action, index2) {
      TUIChatEngine.TUIGroupService.handleGroupApplication({
        handleAction: action,
        application: customApplication.application
      }).then(() => {
        customGroupApplicationList.value[index2].isRemoved = true;
        setTimeout(() => {
          customGroupApplicationList.value.splice(index2, 1);
          groupApplicationCount.value -= 1;
        }, 150);
      }).catch(() => {
      });
    }
    Vue.onMounted(() => {
      getCurrentGroupApplicationList().then((applicationList) => {
        groupApplicationCount.value = applicationList.length;
      });
      TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.GRP, {
        groupSystemNoticeList: onGroupSystemNoticeListUpdated
      });
    });
    Vue.onUnmounted(() => {
      TUIChatEngine.TUIStore.unwatch(TUIChatEngine.StoreName.GRP, {
        groupSystemNoticeList: onGroupSystemNoticeListUpdated
      });
    });
    function onGroupSystemNoticeListUpdated() {
      generateCustomGroupApplicationList().then((list) => {
        customGroupApplicationList.value = list;
        groupApplicationCount.value = list.length;
      });
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", null, [
        Vue.unref(groupApplicationCount) > 0 ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
          Vue.createElementVNode("div", null, Vue.toDisplayString(Vue.unref(groupApplicationCount)) + Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.条入群申请")), 1),
          Vue.createElementVNode("div", {
            class: "application-tips-btn",
            onClick: toggleGroupApplicationDrawerShow
          }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.点击处理")), 1)
        ])) : Vue.createCommentVNode("", true),
        Vue.createVNode(index.default, {
          ref_key: "drawerDomInstanceRef",
          ref: drawerDomInstanceRef,
          visible: Vue.unref(isGroupApplicationDrawerShow),
          zIndex: 998,
          popDirection: Vue.unref(env.isMobile) ? "bottom" : "right",
          isFullScreen: Vue.unref(env.isMobile),
          overlayColor: Vue.unref(env.isMobile) ? void 0 : "transparent",
          drawerStyle: {
            bottom: {
              minHeight: "60vh",
              maxHeight: "80vh",
              borderRadius: "12px 12px 0 0"
            },
            right: {
              width: "360px",
              borderRadius: "12px 0 0 12px",
              boxShadow: "0 0 10px 0 #d0d0d0"
            }
          },
          onOnOverlayClick: toggleGroupApplicationDrawerShow
        }, {
          default: Vue.withCtx(() => [
            Vue.createElementVNode("div", _hoisted_2, [
              Vue.createElementVNode("header", _hoisted_3, [
                Vue.createElementVNode("div", { onClick: toggleGroupApplicationDrawerShow }, [
                  Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createBlock(Icon.default, {
                    key: 0,
                    file: Vue.unref(closeDark.default),
                    size: "16px"
                  }, null, 8, ["file"])) : (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_4, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("关闭")), 1))
                ])
              ]),
              Vue.createElementVNode("main", null, [
                (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(Vue.unref(customGroupApplicationList), (item, index2) => {
                  return Vue.openBlock(), Vue.createElementBlock("div", {
                    key: item.nick,
                    class: Vue.normalizeClass({
                      "application-item": true,
                      "removed": item.isRemoved
                    })
                  }, [
                    Vue.createVNode(index$1.default, {
                      style: {
                        flex: "0 0 auto"
                      },
                      url: item.avatar,
                      useSkeletonAnimation: true
                    }, null, 8, ["url"]),
                    Vue.createElementVNode("div", _hoisted_5, [
                      Vue.createElementVNode("div", _hoisted_6, Vue.toDisplayString(item.nick), 1),
                      Vue.createElementVNode("div", _hoisted_7, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.申请加入")), 1)
                    ]),
                    Vue.createElementVNode("div", _hoisted_8, [
                      Vue.createElementVNode("div", {
                        class: "agree",
                        onClick: ($event) => handleApplication(item, "Agree", index2)
                      }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.同意")), 9, _hoisted_9),
                      Vue.createElementVNode("div", {
                        class: "reject",
                        onClick: ($event) => handleApplication(item, "Reject", index2)
                      }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.拒绝")), 9, _hoisted_10)
                    ])
                  ], 2);
                }), 128))
              ])
            ])
          ]),
          _: 1
        }, 8, ["visible", "popDirection", "isFullScreen", "overlayColor"])
      ]);
    };
  }
});
exports.default = _sfc_main;
