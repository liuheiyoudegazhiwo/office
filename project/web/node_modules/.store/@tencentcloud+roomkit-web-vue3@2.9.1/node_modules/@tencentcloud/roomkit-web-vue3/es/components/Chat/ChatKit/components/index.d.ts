import { default as TUIChat } from './TUIChat';
import { default as TUIConversation } from './TUIConversation';
import { default as TUISearch } from './TUISearch';
import { default as TUIContact } from './TUIContact';
import { default as TUIGroup } from './TUIGroup';

declare const TUIComponents: {
    TUIChat: {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{}> & Readonly<{
            onCloseChat?: ((...args: any[]) => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            closeChat: (...args: any[]) => void;
        }, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{}> & Readonly<{
            onCloseChat?: ((...args: any[]) => any) | undefined;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{}> & Readonly<{
        onCloseChat?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        closeChat: (...args: any[]) => void;
    }, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    });
    TUIConversation: import('vue').DefineComponent<{}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        handleSwitchConversation: (...args: any[]) => void;
    }, string, import('vue').PublicProps, Readonly<{}> & Readonly<{
        onHandleSwitchConversation?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    TUIContact: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        displayType: {
            type: StringConstructor;
            default: string;
            require: boolean;
        };
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        switchConversation: (...args: any[]) => void;
    }, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        displayType: {
            type: StringConstructor;
            default: string;
            require: boolean;
        };
    }>> & Readonly<{
        onSwitchConversation?: ((...args: any[]) => any) | undefined;
    }>, {
        displayType: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    TUISearch: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        searchType: {
            type: import('vue').PropType<import('./TUISearch/type').SEARCH_TYPE>;
            default: () => "conversation" | "global";
        };
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        searchType: {
            type: import('vue').PropType<import('./TUISearch/type').SEARCH_TYPE>;
            default: () => "conversation" | "global";
        };
    }>> & Readonly<{}>, {
        searchType: import('./TUISearch/type').SEARCH_TYPE;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    TUIGroup: import('vue').DefineComponent<{}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
};
export default TUIComponents;
export { TUIChat, TUIConversation, TUIContact, TUISearch, TUIGroup, };
