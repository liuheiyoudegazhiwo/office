"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const room = require("../../stores/room.js");
const pinia = require("pinia");
const index = require("./base/Select/index.js");
const index$1 = require("./base/Option/index.js");
const TUIRoomEngine = require("@tencentcloud/tuiroom-engine-js");
const useDeviceManager = require("../../hooks/useDeviceManager.js");
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "DeviceSelect",
  props: {
    deviceType: {},
    onChange: { type: Function },
    disabled: { type: Boolean, default: false }
  },
  setup(__props) {
    const { deviceManager } = useDeviceManager.default();
    const roomStore = room.useRoomStore();
    const {
      cameraList,
      microphoneList,
      speakerList,
      currentCameraId,
      currentMicrophoneId,
      currentSpeakerId
    } = pinia.storeToRefs(roomStore);
    const deviceList = Vue.ref(getDeviceList());
    const currentDeviceId = Vue.ref(getInitDeviceId());
    function getInitDeviceId() {
      if (__props.deviceType === "camera") {
        return currentCameraId.value;
      }
      if (__props.deviceType === "microphone") {
        return currentMicrophoneId.value;
      }
      if (__props.deviceType === "speaker") {
        return currentSpeakerId.value;
      }
      return "";
    }
    if (__props.deviceType === "camera") {
      Vue.watch(
        currentCameraId,
        (val) => {
          if (currentDeviceId.value !== val) {
            currentDeviceId.value = val;
          }
        },
        { immediate: true }
      );
    }
    if (__props.deviceType === "microphone") {
      Vue.watch(
        currentMicrophoneId,
        (val) => {
          if (currentDeviceId.value !== val) {
            currentDeviceId.value = val;
          }
        },
        { immediate: true }
      );
    }
    if (__props.deviceType === "speaker") {
      Vue.watch(
        currentSpeakerId,
        (val) => {
          if (currentDeviceId.value !== val) {
            currentDeviceId.value = val;
          }
        },
        { immediate: true }
      );
    }
    function getDeviceList() {
      if (__props.deviceType === "camera") {
        return cameraList;
      }
      if (__props.deviceType === "microphone") {
        return microphoneList;
      }
      if (__props.deviceType === "speaker") {
        return speakerList;
      }
      return [];
    }
    async function handleChange(deviceId) {
      var _a, _b, _c;
      __props.onChange && __props.onChange(deviceId);
      switch (__props.deviceType) {
        case "camera":
          try {
            await ((_a = deviceManager.instance) == null ? void 0 : _a.setCurrentDevice({
              type: TUIRoomEngine.TUIMediaDeviceType.kMediaDeviceTypeVideoCamera,
              deviceId
            }));
            roomStore.setCurrentCameraId(deviceId);
          } catch (error) {
            if (cameraList.value.map((item) => item.deviceId).includes(currentCameraId.value)) {
              currentDeviceId.value = currentCameraId.value;
            }
          }
          break;
        case "microphone":
          try {
            await ((_b = deviceManager.instance) == null ? void 0 : _b.setCurrentDevice({
              type: TUIRoomEngine.TUIMediaDeviceType.kMediaDeviceTypeAudioInput,
              deviceId
            }));
            roomStore.setCurrentMicrophoneId(deviceId);
          } catch (error) {
            if (microphoneList.value.map((item) => item.deviceId).includes(currentMicrophoneId.value)) {
              currentDeviceId.value = currentMicrophoneId.value;
            }
          }
          break;
        case "speaker":
          try {
            await ((_c = deviceManager.instance) == null ? void 0 : _c.setCurrentDevice({
              type: TUIRoomEngine.TUIMediaDeviceType.kMediaDeviceTypeAudioOutput,
              deviceId
            }));
            roomStore.setCurrentSpeakerId(deviceId);
          } catch (error) {
            if (speakerList.value.map((item) => item.deviceId).includes(currentSpeakerId.value)) {
              currentDeviceId.value = currentSpeakerId.value;
            }
          }
          break;
      }
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(Vue.unref(index.default), {
        modelValue: currentDeviceId.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => currentDeviceId.value = $event),
        placeholder: "placeholder",
        class: "select",
        disabled: _ctx.disabled,
        teleported: false,
        "popper-append-to-body": false,
        onChange: handleChange
      }, {
        default: Vue.withCtx(() => [
          (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(deviceList.value, (item) => {
            return Vue.openBlock(), Vue.createBlock(Vue.unref(index$1.default), {
              key: item.deviceId,
              label: item.deviceName,
              value: item.deviceId
            }, null, 8, ["label", "value"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "disabled"]);
    };
  }
});
exports.default = _sfc_main;
