declare function getRoomParam(): {
    isOpenCamera: boolean;
    isOpenMicrophone: boolean;
    defaultCameraId: string;
    defaultMicrophoneId: string;
    defaultSpeakerId: string;
};
declare function startStreamPreview(): Promise<void>;
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    userName?: string;
    givenRoomId: string | null;
    enableScheduledConference?: boolean;
}>, {
    userName: string;
    enableScheduledConference: boolean;
}>>, {
    getRoomParam: typeof getRoomParam;
    startStreamPreview: typeof startStreamPreview;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "create-room": (...args: any[]) => void;
    "enter-room": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    userName?: string;
    givenRoomId: string | null;
    enableScheduledConference?: boolean;
}>, {
    userName: string;
    enableScheduledConference: boolean;
}>>> & Readonly<{
    "onCreate-room"?: ((...args: any[]) => any) | undefined;
    "onEnter-room"?: ((...args: any[]) => any) | undefined;
}>, {
    userName: string;
    enableScheduledConference: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
