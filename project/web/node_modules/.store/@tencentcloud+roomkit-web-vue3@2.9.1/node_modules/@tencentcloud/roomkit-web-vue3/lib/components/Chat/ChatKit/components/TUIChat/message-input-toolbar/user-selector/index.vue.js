"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
require("../../../../adapter-vue.js");
const index = require("../../../common/Dialog/index.vue.js");
const index$1 = require("../../../common/Transfer/index.vue.js");
const env = require("../../../../utils/env.js");
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    // type: voiceCall/groupCall/...
    type: {
      type: String,
      default: ""
    },
    currentConversation: {
      type: Object,
      default: () => ({})
    },
    isGroup: {
      type: Boolean,
      default: false
    }
  },
  emits: ["submit", "cancel"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const show = Vue.ref(false);
    const groupID = Vue.ref("");
    const memberList = Vue.ref([]);
    const searchMemberList = Vue.ref([]);
    const selfUserID = Vue.ref("");
    const titleMap = {
      voiceCall: "发起群语音",
      videoCall: "发起群视频"
    };
    const title = Vue.computed(() => {
      return titleMap[props.type] ? titleMap[props.type] : "";
    });
    TUIChatEngine.TUIUserService.getUserProfile().then((res) => {
      var _a;
      if ((_a = res == null ? void 0 : res.data) == null ? void 0 : _a.userID) {
        selfUserID.value = res.data.userID;
      }
    });
    Vue.watch(
      () => {
        var _a;
        return [(_a = props == null ? void 0 : props.currentConversation) == null ? void 0 : _a.conversationID, show.value];
      },
      (newVal, oldVal) => {
        if (newVal && newVal !== oldVal) {
          if (props.isGroup && show.value) {
            groupID.value = props.currentConversation.groupProfile.groupID;
            TUIChatEngine.TUIGroupService.getGroupMemberList({
              groupID: groupID.value
            }).then((res) => {
              var _a, _b;
              memberList.value = (_b = (_a = res == null ? void 0 : res.data) == null ? void 0 : _a.memberList) == null ? void 0 : _b.filter(
                (user) => (user == null ? void 0 : user.userID) !== selfUserID.value
              );
              searchMemberList.value = memberList.value;
            });
          } else {
            groupID.value = "";
            memberList.value = [];
            searchMemberList.value = memberList.value;
          }
        }
      },
      {
        immediate: true
      }
    );
    const search = (searchInfo) => {
      var _a;
      const results = (_a = memberList.value) == null ? void 0 : _a.filter(
        (member) => (member == null ? void 0 : member.userID) === searchInfo
      );
      searchMemberList.value = (results == null ? void 0 : results.length) ? results : memberList.value;
    };
    const submit = (selectedMemberList) => {
      const userIDList = [];
      selectedMemberList == null ? void 0 : selectedMemberList.forEach((user) => {
        (user == null ? void 0 : user.userID) && userIDList.push(user.userID);
      });
      if (props.type === "voiceCall") {
        emits("submit", { userIDList, groupID: groupID.value, type: 1 });
      } else if (props.type === "videoCall") {
        emits("submit", { userIDList, groupID: groupID.value, type: 2 });
      }
      searchMemberList.value = memberList.value;
      toggleShow(false);
    };
    const cancel = () => {
      searchMemberList.value = memberList.value;
      emits("cancel");
      toggleShow(false);
    };
    const toggleShow = (showStatus) => {
      show.value = showStatus;
    };
    __expose({
      toggleShow
    });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(index.default, {
        show: Vue.unref(show),
        isH5: !Vue.unref(env.isPC),
        isHeaderShow: false,
        isFooterShow: false,
        background: false,
        "onUpdate:show": toggleShow
      }, {
        default: Vue.withCtx(() => [
          Vue.createVNode(index$1.default, {
            isSearch: true,
            title: Vue.unref(title),
            list: Vue.unref(searchMemberList),
            isH5: !Vue.unref(env.isPC),
            isRadio: false,
            onSearch: search,
            onSubmit: submit,
            onCancel: cancel
          }, null, 8, ["title", "list", "isH5"])
        ]),
        _: 1
      }, 8, ["show", "isH5"]);
    };
  }
});
exports.default = _sfc_main;
