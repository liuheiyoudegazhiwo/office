/**
 * debounce function
 * @param {*} fn Functions to execute
 * @param {*} delay Interval time
 * @returns function
 */
export declare function debounce(fn: {
    apply: (arg0: any, arg1: any) => void;
}, delay: number | undefined): (this: any, ...args: any) => void;
/**
 * throttle function
 * @param {*} fn Functions to execute
 * @param {*} delay Interval time
 * @returns function
 */
export declare function throttle(fn: {
    apply: (arg0: any, arg1: any[]) => void;
}, delay: number): (this: any, ...args: any[]) => void;
/**
 * Make the dom element fullscreen
 * @param {dom} element dom element
 * @example
 * setFullscreen(document.documentElement) // The entire page goes full screen
 * setFullscreen(document.getElementById("id")) // An element goes full screen
 */
export declare function setFullScreen(element: HTMLElement): void;
/**
 * exitFullscreen
 * @example
 * exitFullscreen();
 */
export declare function exitFullScreen(): void;
/**
 * Get the value of the specified key from window.location.href
 * @param {*} key The key to get
 * @returns The value corresponding to the key specified in window.location.href.
 * @example
 * const value = getUrlParam(key);
 */
export declare function getUrlParam(key: string): string | null;
/**
 * deepClone
 * @param data Raw data of any type
 * @returns Data after deepClone
 */
export declare function deepClone(data: any): any;
export { clipBoard } from './adapter';
export declare const isUndefined: (value: any) => value is undefined;
export declare const isString: (value: any) => value is string;
export declare const isNumber: (value: any) => value is number;
export declare const isStringNumber: (value: any) => boolean;
export declare const isFunction: (value: any) => boolean;
export declare function addSuffix(value: string | number, suffix?: string): string;
export declare function getUrlWithRoomId(roomId: string): string;
export declare function calculateByteLength(str: string): number;
export declare function objectMerge(...args: any[]): any;
export declare function convertSecondsToHMS(seconds: number): {
    hours: number;
    minutes: number;
    seconds: number;
};
export declare function getNanoId(size?: number): string;
export declare function findLastIndex<T>(array: T[], predicate: (value: T, index: number, obj: T[]) => boolean, thisArg?: any): number;
export declare function formatTimestampToTime(timestamp: number, format?: string): string;
export type Comparator<T> = (a: T, b: T) => -1 | 0 | 1;
/**
 * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.
 * The comparators are applied in the order they are given (left -> right).
 *
 * @param comparators the comparators to use for sorting.
 * @returns a combined {@link Comparator<T>}.
 */
export declare const combineComparators: <T>(...comparators: Comparator<T>[]) => Comparator<T>;
export declare const createComparator: <T>(compareRules: (data1: T, data2: T) => boolean) => (a: T, b: T) => 1 | -1 | 0;
export declare function arrayIsEqual<T>(arr1: T[], arr2: T[]): boolean;
