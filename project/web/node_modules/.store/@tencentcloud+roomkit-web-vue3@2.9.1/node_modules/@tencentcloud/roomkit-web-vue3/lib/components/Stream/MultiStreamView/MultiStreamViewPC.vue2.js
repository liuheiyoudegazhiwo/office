"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const ArrowStrokeTurnPageIcon = require("../../common/icons/ArrowStrokeTurnPageIcon.vue.js");
const SvgIcon = require("../../common/base/SvgIcon.vue.js");
const index = require("../common/StreamList/index.vue.js");
const mediaManager = require("../../../services/manager/mediaManager.js");
const useMultiStreamViewHook = require("./useMultiStreamViewHook.js");
const pinia = require("pinia");
const basic = require("../../../stores/basic.js");
const _hoisted_1 = { id: "streamContainer" };
const _hoisted_2 = {
  key: 0,
  class: "turn-page-container"
};
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "MultiStreamViewPC",
  props: {
    maxColumn: {},
    maxRow: {},
    fillMode: {},
    excludeStreamInfoList: {}
  },
  emits: ["stream-view-dblclick"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const {
      column,
      row,
      totalPageNumber,
      isEqualPointsLayout,
      renderStreamInfoList,
      equalPointsLayoutStreamList,
      currentPageIndex
    } = useMultiStreamViewHook.default(props);
    const basicStore = basic.useBasicStore();
    const { showRoomTool } = pinia.storeToRefs(basicStore);
    const streamInfoList = Vue.computed(() => {
      if (isEqualPointsLayout.value) {
        return equalPointsLayoutStreamList.value[currentPageIndex.value];
      }
      return renderStreamInfoList.value;
    });
    const emits = __emit;
    function handleStreamDblclick(streamInfo) {
      emits("stream-view-dblclick", streamInfo);
    }
    const showTurnPageControl = Vue.computed(
      () => isEqualPointsLayout.value && totalPageNumber.value > 1
    );
    const showTurnPageLeftArrow = Vue.computed(
      () => isEqualPointsLayout.value && currentPageIndex.value > 0
    );
    const showTurnPageRightArrow = Vue.computed(
      () => isEqualPointsLayout.value && currentPageIndex.value < totalPageNumber.value - 1
    );
    function handleTurnPageLeft() {
      currentPageIndex.value = currentPageIndex.value - 1;
    }
    function handleTurnPageRight() {
      currentPageIndex.value = currentPageIndex.value + 1;
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
        Vue.createVNode(index.default, {
          streamInfoList: streamInfoList.value,
          column: Vue.unref(column),
          row: Vue.unref(row),
          streamPlayMode: Vue.unref(mediaManager.StreamPlayMode).PLAY_IN_VISIBLE,
          streamPlayQuality: Vue.unref(mediaManager.StreamPlayQuality).Default,
          "aspect-ratio": "16:9",
          onStreamViewDblclick: handleStreamDblclick
        }, null, 8, ["streamInfoList", "column", "row", "streamPlayMode", "streamPlayQuality"]),
        showTurnPageControl.value && Vue.unref(showRoomTool) ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_2, [
          Vue.withDirectives(Vue.createElementVNode("div", {
            class: "turn-page-arrow-container left-container",
            onClick: handleTurnPageLeft
          }, [
            Vue.createVNode(SvgIcon.default, { icon: ArrowStrokeTurnPageIcon.default })
          ], 512), [
            [Vue.vShow, showTurnPageLeftArrow.value]
          ]),
          Vue.withDirectives(Vue.createElementVNode("div", {
            class: "turn-page-arrow-container right-container",
            onClick: handleTurnPageRight
          }, [
            Vue.createVNode(SvgIcon.default, {
              class: "turn-page-right",
              icon: ArrowStrokeTurnPageIcon.default
            })
          ], 512), [
            [Vue.vShow, showTurnPageRightArrow.value]
          ])
        ])) : Vue.createCommentVNode("", true)
      ]);
    };
  }
});
exports.default = _sfc_main;
