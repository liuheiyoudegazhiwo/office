var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
const colorMap = {
  "--text-color-link": "var(--uikit-color-theme-6)",
  "--text-color-link-hover": "var(--uikit-color-theme-5)",
  "--text-color-link-disabled": "var(--uikit-color-theme-2)",
  "--bg-color-bubble-own": "var(--uikit-color-theme-7)",
  "--list-color-focused": "var(--uikit-color-theme-2)",
  "--button-color-primary-default": "var(--uikit-color-theme-6)",
  "--button-color-primary-hover": "var(--uikit-color-theme-5)",
  "--button-color-primary-active": "var(--uikit-color-theme-7)",
  "--button-color-primary-disabled": "var(--uikit-color-theme-2)",
  "--checkbox-color-selected": "var(--uikit-color-theme-5)",
  "--toast-color-default": "var(--uikit-color-theme-2)",
  "--switch-color-on": "var(--uikit-color-theme-5)",
  "--slider-color-filled": "var(--uikit-color-theme-5)"
};
const _ThemeColorGenerator = class _ThemeColorGenerator {
  static getCurrentPrimaryColor() {
    const htmlElement = document.documentElement;
    const primaryColor = getComputedStyle(htmlElement).getPropertyValue("--primary-color").trim();
    return primaryColor.toLowerCase();
  }
  static replaceColorVariable(cssVarValue, targetColor) {
    const colorRegex = new RegExp(`var\\(--uikit-color-(${_ThemeColorGenerator.COLOR_TYPES.join("|")})-(\\d+)\\)`);
    return cssVarValue.replace(colorRegex, (match, currentColor, number) => `var(--uikit-color-${targetColor}-${number})`);
  }
  static updateCSSVariables(variables, targetColor) {
    const root = document.documentElement;
    Object.entries(variables).forEach(([key, value]) => {
      if (value.includes("var(--uikit-color-")) {
        const newValue = this.replaceColorVariable(value, targetColor);
        root.style.setProperty(key, newValue);
      }
    });
  }
  static applyThemeColor() {
    const currentColor = this.getCurrentPrimaryColor();
    if (!this.COLOR_TYPES.includes(currentColor)) {
      console.warn(`Unsupported color type: ${currentColor}, using default color: ${this.DEFAULT_COLOR}`);
      return;
    }
    const variables = colorMap;
    this.updateCSSVariables(variables, currentColor);
  }
  static watchThemeColor() {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "attributes" && mutation.attributeName === "style") {
          this.applyThemeColor();
        }
      });
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["style"]
    });
  }
};
__publicField(_ThemeColorGenerator, "COLOR_TYPES", ["theme", "green", "red", "orange"]);
__publicField(_ThemeColorGenerator, "DEFAULT_COLOR", "theme");
let ThemeColorGenerator = _ThemeColorGenerator;
export {
  ThemeColorGenerator
};
