declare const Select: ({
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        modelValue: {
            type: import('vue').PropType<string | number | boolean | object>;
            required: true;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        theme: {
            type: import('vue').PropType<"light" | "dark">;
        };
        customSelectContentStyle: {
            type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
        };
    }>> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        change: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
    }, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        modelValue: {
            type: import('vue').PropType<string | number | boolean | object>;
            required: true;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
        };
        theme: {
            type: import('vue').PropType<"light" | "dark">;
        };
        customSelectContentStyle: {
            type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
        };
    }>> & Readonly<{
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    modelValue: {
        type: import('vue').PropType<string | number | boolean | object>;
        required: true;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
    };
    theme: {
        type: import('vue').PropType<"light" | "dark">;
    };
    customSelectContentStyle: {
        type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
    };
}>> & Readonly<{
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        customSelectContent?(_: {}): any;
        default?(_: {}): any;
    };
})) | import('vue').DefineComponent<{}, {}, any>;
export default Select;
