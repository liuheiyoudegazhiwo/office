"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "message-call-group",
  props: {
    message: { default: () => ({}) },
    signalingInfo: { default: () => ({}) },
    customContent: { default: () => ({}) },
    blinkMessageIDList: { default: () => [] }
  },
  setup(__props) {
    const props = __props;
    const TYPES = TUIChatEngine.TYPES;
    const isCallMessage = Vue.computed(() => !!props.signalingInfo);
    const conversationType = Vue.computed(() => {
      var _a;
      return (_a = props.message) == null ? void 0 : _a.conversationType;
    });
    const custom = Vue.computed(() => {
      var _a;
      return (_a = props.customContent) == null ? void 0 : _a.custom;
    });
    const isBlink = Vue.computed(() => {
      var _a, _b;
      if ((_a = props.message) == null ? void 0 : _a.ID) {
        return (_b = props.blinkMessageIDList) == null ? void 0 : _b.includes(props.message.ID);
      }
      return false;
    });
    return (_ctx, _cache) => {
      return Vue.unref(isCallMessage) && Vue.unref(conversationType) === Vue.unref(TYPES).CONV_GROUP ? (Vue.openBlock(), Vue.createElementBlock("div", {
        key: 0,
        class: Vue.normalizeClass({ "blink-text": Vue.unref(isBlink) })
      }, Vue.toDisplayString(Vue.unref(custom)), 3)) : Vue.createCommentVNode("", true);
    };
  }
});
exports.default = _sfc_main;
