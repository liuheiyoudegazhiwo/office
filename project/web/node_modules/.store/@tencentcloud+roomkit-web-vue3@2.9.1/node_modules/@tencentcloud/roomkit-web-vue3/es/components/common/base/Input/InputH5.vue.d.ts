interface Props {
    modelValue: string;
    placeholder?: string;
    disabled?: boolean;
    type?: string;
    readonly?: boolean;
    enterkeyhint?: string;
    search?: (data: string) => any;
    select?: (data: any) => any;
    maxlength?: string;
    border?: boolean;
    align?: 'center' | 'end' | 'justify' | 'left' | 'match-parent' | 'right' | 'start';
}
declare function __VLS_template(): {
    suffixIcon?(_: {}): any;
    searchResultItem?(_: {
        data: any;
    }): any;
};
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    modelValue: string;
    placeholder: string;
    disabled: boolean;
    type: string;
    enterkeyhint: string;
    maxlength: string;
    border: boolean;
    align: string;
}>>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    input: (...args: any[]) => void;
    done: (...args: any[]) => void;
    blur: (...args: any[]) => void;
    focus: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    modelValue: string;
    placeholder: string;
    disabled: boolean;
    type: string;
    enterkeyhint: string;
    maxlength: string;
    border: boolean;
    align: string;
}>>> & Readonly<{
    onInput?: ((...args: any[]) => any) | undefined;
    onDone?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    type: string;
    disabled: boolean;
    align: "center" | "end" | "justify" | "left" | "match-parent" | "right" | "start";
    placeholder: string;
    enterkeyhint: string;
    modelValue: string;
    maxlength: string;
    border: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
