"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const index$1 = require("../../../../common/Overlay/index.vue.js");
const index$3 = require("../../../../common/Drawer/index.vue.js");
const index$2 = require("../simple-message-list/index.vue.js");
const env = require("../../../../../utils/env.js");
const index = require("../../../emoji-config/index.js");
const _hoisted_1 = { class: "record-title" };
const _hoisted_2 = { class: "record-abstract-container" };
const _hoisted_3 = { class: "record-footer" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    renderData: {},
    disabled: { type: Boolean, default: false },
    messageItem: { default: () => ({}) }
  },
  emits: ["assignMessageIDInUniapp"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const props = __props;
    const isMessageListVisible = Vue.ref(false);
    function openMergeDetail() {
      if (props.disabled) {
        return;
      }
      if (!env.isUniFrameWork) {
        isMessageListVisible.value = true;
      } else {
        emits("assignMessageIDInUniapp", props.messageItem.ID);
      }
    }
    function closeMergeDetail() {
      isMessageListVisible.value = false;
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", null, [
        Vue.createElementVNode("div", {
          class: "message-record-container",
          onClick: openMergeDetail
        }, [
          Vue.createElementVNode("div", _hoisted_1, Vue.toDisplayString(props.renderData.title), 1),
          Vue.createElementVNode("div", _hoisted_2, [
            (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(props.renderData.abstractList.slice(0, 7), (item, index$12) => {
              return Vue.openBlock(), Vue.createElementBlock("div", {
                key: index$12,
                class: "record-abstract-item"
              }, Vue.toDisplayString(Vue.unref(index.transformTextWithKeysToEmojiNames)(item)), 1);
            }), 128))
          ]),
          Vue.createElementVNode("div", _hoisted_3, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.聊天记录")), 1)
        ]),
        !props.disabled && Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createBlock(index$1.default, {
          key: 0,
          visible: Vue.unref(isMessageListVisible),
          onOnOverlayClick: _cache[0] || (_cache[0] = ($event) => isMessageListVisible.value = false)
        }, {
          default: Vue.withCtx(() => [
            Vue.createVNode(index$2.default, {
              isMounted: Vue.unref(isMessageListVisible),
              renderData: props.renderData,
              messageID: props.messageItem.ID,
              onCloseOverlay: closeMergeDetail
            }, null, 8, ["isMounted", "renderData", "messageID"])
          ]),
          _: 1
        }, 8, ["visible"])) : !props.disabled && Vue.unref(env.isH5) && !Vue.unref(env.isUniFrameWork) ? (Vue.openBlock(), Vue.createBlock(index$3.default, {
          key: 1,
          visible: Vue.unref(isMessageListVisible),
          isFullScreen: true,
          overlayColor: "transparent",
          popDirection: "right"
        }, {
          default: Vue.withCtx(() => [
            Vue.createVNode(index$2.default, {
              isMounted: Vue.unref(isMessageListVisible),
              renderData: props.renderData,
              messageID: props.messageItem.ID,
              onCloseOverlay: closeMergeDetail
            }, null, 8, ["isMounted", "renderData", "messageID"])
          ]),
          _: 1
        }, 8, ["visible"])) : Vue.createCommentVNode("", true)
      ]);
    };
  }
});
exports.default = _sfc_main;
