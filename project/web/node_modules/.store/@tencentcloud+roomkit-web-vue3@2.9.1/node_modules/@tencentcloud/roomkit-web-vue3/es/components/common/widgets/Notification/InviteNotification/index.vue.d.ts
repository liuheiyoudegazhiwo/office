import { invitationInfo } from './index';

type BeforeCloseFn = () => void;
interface Props {
    appendTo: string;
    customClass?: string;
    message: invitationInfo;
    onConfirm?: BeforeCloseFn | null;
    onCancel?: BeforeCloseFn | null;
    close?: BeforeCloseFn | null;
    confirmButtonText?: string;
    cancelButtonText?: string;
}
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    appendTo: string;
    customClass: string;
    message: {
        userId: string;
        userName: string;
        avatarUrl: string;
        roomName: string;
        roomMemberCount: number;
        roomOwner: string;
        roomId: string;
    };
    confirmButtonText: string;
    cancelButtonText: string;
    onConfirm: null;
    onCancel: null;
    close: null;
}>>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    appendTo: string;
    customClass: string;
    message: {
        userId: string;
        userName: string;
        avatarUrl: string;
        roomName: string;
        roomMemberCount: number;
        roomOwner: string;
        roomId: string;
    };
    confirmButtonText: string;
    cancelButtonText: string;
    onConfirm: null;
    onCancel: null;
    close: null;
}>>> & Readonly<{}>, {
    message: invitationInfo;
    close: BeforeCloseFn | null;
    customClass: string;
    cancelButtonText: string;
    confirmButtonText: string;
    appendTo: string;
    onConfirm: BeforeCloseFn | null;
    onCancel: BeforeCloseFn | null;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
