declare const Input: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        search: {
            type: import('vue').PropType<(data: string) => any>;
        };
        select: {
            type: import('vue').PropType<(data: any) => any>;
        };
        type: {
            type: import('vue').PropType<string>;
            default: string;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        align: {
            type: import('vue').PropType<"left" | "right" | "end" | "center" | "justify" | "match-parent" | "start">;
            default: string;
        };
        placeholder: {
            type: import('vue').PropType<string>;
            default: string;
        };
        enterkeyhint: {
            type: import('vue').PropType<string>;
            default: string;
        };
        modelValue: {
            type: import('vue').PropType<string>;
            required: true;
            default: string;
        };
        readonly: {
            type: import('vue').PropType<boolean>;
        };
        maxlength: {
            type: import('vue').PropType<string>;
            default: string;
        };
        border: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        onInput?: ((...args: any[]) => any) | undefined;
        onDone?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onFocus?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        input: (...args: any[]) => void;
        done: (...args: any[]) => void;
        blur: (...args: any[]) => void;
        focus: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
    }, import('vue').PublicProps, {
        type: string;
        disabled: boolean;
        align: "center" | "end" | "justify" | "left" | "match-parent" | "right" | "start";
        placeholder: string;
        enterkeyhint: string;
        modelValue: string;
        maxlength: string;
        border: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        search: {
            type: import('vue').PropType<(data: string) => any>;
        };
        select: {
            type: import('vue').PropType<(data: any) => any>;
        };
        type: {
            type: import('vue').PropType<string>;
            default: string;
        };
        disabled: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
        align: {
            type: import('vue').PropType<"left" | "right" | "end" | "center" | "justify" | "match-parent" | "start">;
            default: string;
        };
        placeholder: {
            type: import('vue').PropType<string>;
            default: string;
        };
        enterkeyhint: {
            type: import('vue').PropType<string>;
            default: string;
        };
        modelValue: {
            type: import('vue').PropType<string>;
            required: true;
            default: string;
        };
        readonly: {
            type: import('vue').PropType<boolean>;
        };
        maxlength: {
            type: import('vue').PropType<string>;
            default: string;
        };
        border: {
            type: import('vue').PropType<boolean>;
            default: boolean;
        };
    }>> & Readonly<{
        onInput?: ((...args: any[]) => any) | undefined;
        onDone?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onFocus?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, {
        type: string;
        disabled: boolean;
        align: "center" | "end" | "justify" | "left" | "match-parent" | "right" | "start";
        placeholder: string;
        enterkeyhint: string;
        modelValue: string;
        maxlength: string;
        border: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    search: {
        type: import('vue').PropType<(data: string) => any>;
    };
    select: {
        type: import('vue').PropType<(data: any) => any>;
    };
    type: {
        type: import('vue').PropType<string>;
        default: string;
    };
    disabled: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
    align: {
        type: import('vue').PropType<"left" | "right" | "end" | "center" | "justify" | "match-parent" | "start">;
        default: string;
    };
    placeholder: {
        type: import('vue').PropType<string>;
        default: string;
    };
    enterkeyhint: {
        type: import('vue').PropType<string>;
        default: string;
    };
    modelValue: {
        type: import('vue').PropType<string>;
        required: true;
        default: string;
    };
    readonly: {
        type: import('vue').PropType<boolean>;
    };
    maxlength: {
        type: import('vue').PropType<string>;
        default: string;
    };
    border: {
        type: import('vue').PropType<boolean>;
        default: boolean;
    };
}>> & Readonly<{
    onInput?: ((...args: any[]) => any) | undefined;
    onDone?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    input: (...args: any[]) => void;
    done: (...args: any[]) => void;
    blur: (...args: any[]) => void;
    focus: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
}, string, {
    type: string;
    disabled: boolean;
    align: "center" | "end" | "justify" | "left" | "match-parent" | "right" | "start";
    placeholder: string;
    enterkeyhint: string;
    modelValue: string;
    maxlength: string;
    border: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        suffixIcon?(_: {}): any;
        searchResultItem?(_: {
            data: any;
        }): any;
    };
});
export default Input;
