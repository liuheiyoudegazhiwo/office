declare const MultiStreamView: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    maxColumn: {
        type: import('vue').PropType<number>;
        required: true;
    };
    maxRow: {
        type: import('vue').PropType<number>;
        required: true;
    };
    fillMode: {
        type: import('vue').PropType<"fill" | "contain">;
    };
    streamInfoList: {
        type: import('vue').PropType<{
            userId: string;
            streamType: import('../../../../../node_modules/@tencentcloud/tuiroom-engine-js').TUIVideoStreamType;
        }[]>;
    };
    excludeStreamInfoList: {
        type: import('vue').PropType<{
            userId: string;
            streamType: import('../../../../../node_modules/@tencentcloud/tuiroom-engine-js').TUIVideoStreamType;
        }[]>;
    };
    streamPlayMode: {
        type: import('vue').PropType<import('../../../services/manager/mediaManager').StreamPlayMode>;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "stream-view-dblclick": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    maxColumn: {
        type: import('vue').PropType<number>;
        required: true;
    };
    maxRow: {
        type: import('vue').PropType<number>;
        required: true;
    };
    fillMode: {
        type: import('vue').PropType<"fill" | "contain">;
    };
    streamInfoList: {
        type: import('vue').PropType<{
            userId: string;
            streamType: import('../../../../../node_modules/@tencentcloud/tuiroom-engine-js').TUIVideoStreamType;
        }[]>;
    };
    excludeStreamInfoList: {
        type: import('vue').PropType<{
            userId: string;
            streamType: import('../../../../../node_modules/@tencentcloud/tuiroom-engine-js').TUIVideoStreamType;
        }[]>;
    };
    streamPlayMode: {
        type: import('vue').PropType<import('../../../services/manager/mediaManager').StreamPlayMode>;
    };
}>> & Readonly<{
    "onStream-view-dblclick"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    maxColumn: {
        type: import('vue').PropType<number>;
        required: true;
    };
    maxRow: {
        type: import('vue').PropType<number>;
        required: true;
    };
    fillMode: {
        type: import('vue').PropType<"fill" | "contain">;
    };
    excludeStreamInfoList: {
        type: import('vue').PropType<{
            userId: string;
            streamType: import('../../../../../node_modules/@tencentcloud/tuiroom-engine-js').TUIVideoStreamType;
        }[]>;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "stream-view-dblclick": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    maxColumn: {
        type: import('vue').PropType<number>;
        required: true;
    };
    maxRow: {
        type: import('vue').PropType<number>;
        required: true;
    };
    fillMode: {
        type: import('vue').PropType<"fill" | "contain">;
    };
    excludeStreamInfoList: {
        type: import('vue').PropType<{
            userId: string;
            streamType: import('../../../../../node_modules/@tencentcloud/tuiroom-engine-js').TUIVideoStreamType;
        }[]>;
    };
}>> & Readonly<{
    "onStream-view-dblclick"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default MultiStreamView;
