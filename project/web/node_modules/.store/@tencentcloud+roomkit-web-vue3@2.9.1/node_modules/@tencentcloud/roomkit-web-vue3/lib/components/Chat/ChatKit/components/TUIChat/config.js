"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const _TUIChatConfig = class _TUIChatConfig {
  constructor() {
    __publicField(this, "chatType");
    __publicField(this, "features");
    __publicField(this, "theme");
    this.chatType = "";
    this.features = {
      DownloadFile: true,
      CopyMessage: true,
      DeleteMessage: true,
      RevokeMessage: true,
      QuoteMessage: true,
      ForwardMessage: true,
      TranslateMessage: true,
      VoiceToText: true,
      MultiSelection: true,
      EmojiReaction: true,
      InputEmoji: true,
      InputStickers: true,
      InputImage: true,
      InputVoice: true,
      InputVideo: true,
      InputFile: true,
      InputEvaluation: true,
      InputQuickReplies: true,
      InputMention: true,
      MessageSearch: true,
      ReadStatus: true
    };
    this.theme = "light";
  }
  static getInstance() {
    if (!_TUIChatConfig.instance) {
      _TUIChatConfig.instance = new _TUIChatConfig();
    }
    return _TUIChatConfig.instance;
  }
  setChatType(chatType) {
    this.chatType = chatType;
  }
  getChatType() {
    return this.chatType;
  }
  hideTUIChatFeatures(features) {
    if (!features) {
      return;
    }
    features.forEach((feature) => {
      if (this.features[feature]) {
        this.features[feature] = false;
      }
    });
  }
  getFeatureConfig(key) {
    if (key) {
      return this.features[key];
    }
    return this.features;
  }
  setTheme(theme) {
    this.theme = theme;
  }
  getTheme() {
    return this.theme;
  }
};
__publicField(_TUIChatConfig, "instance");
let TUIChatConfig = _TUIChatConfig;
const ChatConfig = TUIChatConfig.getInstance();
const hideTUIChatFeatures = ChatConfig.hideTUIChatFeatures.bind(ChatConfig);
exports.default = ChatConfig;
exports.hideTUIChatFeatures = hideTUIChatFeatures;
