declare const OPtion: ({
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: import('vue').PropType<string>;
            required: true;
        };
        value: {
            type: import('vue').PropType<string | number | boolean | object>;
            required: true;
        };
        customOptionContentStyle: {
            type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: import('vue').PropType<string>;
            required: true;
        };
        value: {
            type: import('vue').PropType<string | number | boolean | object>;
            required: true;
        };
        customOptionContentStyle: {
            type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
    label: {
        type: import('vue').PropType<string>;
        required: true;
    };
    value: {
        type: import('vue').PropType<string | number | boolean | object>;
        required: true;
    };
    customOptionContentStyle: {
        type: import('vue').PropType<string | false | import('vue').CSSProperties | import('vue').StyleValue[] | null>;
    };
}>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        customOptionContent?(_: {}): any;
    };
})) | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    label: {
        type: StringConstructor;
        required: true;
    };
    value: {
        required: true;
        type: (NumberConstructor | StringConstructor)[];
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    label: {
        type: StringConstructor;
        required: true;
    };
    value: {
        required: true;
        type: (NumberConstructor | StringConstructor)[];
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{}>, {
    disabled: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default OPtion;
