import { TUIUserInfo } from '../../services';

export default function useRoomInvite(): {
    t: any;
    isRoomLinkVisible: import('vue').Ref<boolean, boolean>;
    roomId: import('vue').Ref<string, string>;
    origin: string;
    pathname: string;
    isElectron: boolean;
    inviteLink: import('vue').ComputedRef<string>;
    schemeLink: import('vue').ComputedRef<string>;
    inviteBarTitle: import('vue').ComputedRef<any>;
    onCopy: (value: string | number) => Promise<void>;
    displayedInviteInfoList: import('vue').ComputedRef<{
        title: string;
        content: string;
        isShowCopyIcon: boolean;
        isVisible: boolean;
    }[]>;
    invitationFeatureDetails: import('vue').Ref<{
        icon: import('vue').DefineComponent<{}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        text: string;
        function: () => void;
    }[], {
        icon: import('vue').ShallowRef<import('vue').DefineComponent<{}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').DefineComponent<{}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>>;
        text: string;
        function: () => void;
    }[] | {
        icon: import('vue').DefineComponent<{}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        text: string;
        function: () => void;
    }[]>;
    showContacts: import('vue').Ref<boolean, boolean>;
    contactsConfirm: (contacts: TUIUserInfo[]) => Promise<void>;
    contacts: import('vue').Ref<never[], never[]>;
    remoteEnteredUserList: import('vue').ComputedRef<import('../../stores/room').UserInfo[]>;
    isShowRoomShareForm: import('vue').Ref<boolean, boolean>;
    userId: import('vue').Ref<string, string>;
    userName: import('vue').Ref<string, string>;
    inviteInfoList: import('vue').ComputedRef<{
        title: string;
        content: string;
        isShowCopyIcon: boolean;
        isVisible: boolean;
    }[]>;
    copyRoomIdAndRoomLink: () => void;
    sidebarName: import('vue').Ref<"" | "chat" | "invite" | "manage-member" | "more" | "transfer-leave" | "apply" | "aiTranscription", "" | "chat" | "invite" | "manage-member" | "more" | "transfer-leave" | "apply" | "aiTranscription">;
};
