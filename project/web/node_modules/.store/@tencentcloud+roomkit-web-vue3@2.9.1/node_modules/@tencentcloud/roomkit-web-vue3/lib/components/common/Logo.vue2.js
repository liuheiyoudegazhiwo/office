"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const index = require("../../locales/index.js");
const environment = require("../../utils/environment.js");
const SvgIcon = require("./base/SvgIcon.vue.js");
const basic = require("../../stores/basic.js");
const pinia = require("pinia");
const LogoOfPCInChineseBlackIcon = require("./icons/LogoOfPCInChineseBlackIcon.vue.js");
const LogoOfPCInChineseWhiteIcon = require("./icons/LogoOfPCInChineseWhiteIcon.vue.js");
const LogoOfMobileInChinese = require("./icons/LogoOfMobileInChinese.vue.js");
const LogoTitleOfMobileInChinese = require("./icons/LogoTitleOfMobileInChinese.vue.js");
const LogoInEnglish = require("./icons/LogoInEnglish.vue.js");
const LogoTitleInEnglish = require("./icons/LogoTitleInEnglish.vue.js");
const uikitBaseComponentVue3 = require("@tencentcloud/uikit-base-component-vue3");
const _hoisted_1 = { class: "logo-container" };
const _hoisted_2 = { key: 0 };
const _hoisted_3 = { key: 1 };
const _hoisted_4 = {
  key: 2,
  class: "mobile-zh-logo"
};
const _hoisted_5 = { class: "title" };
const _hoisted_6 = { class: "logo" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "Logo",
  setup(__props) {
    const { theme } = uikitBaseComponentVue3.useUIKit();
    const basicStore = basic.useBasicStore();
    const { defaultTheme } = pinia.storeToRefs(basicStore);
    const isEN = Vue.computed(() => index.default.global.locale.value === "en-US");
    const isZH = Vue.computed(() => index.default.global.locale.value === "zh-CN");
    const isDarkTheme = Vue.computed(
      () => theme.value ? theme.value === "dark" : defaultTheme.value === "dark"
    );
    const isLightTheme = Vue.computed(
      () => theme.value ? theme.value === "light" : defaultTheme.value === "light"
    );
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
        !Vue.unref(environment.isMobile) && isZH.value && isDarkTheme.value ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_2, [
          Vue.createVNode(SvgIcon.default, { icon: LogoOfPCInChineseBlackIcon.default })
        ])) : Vue.createCommentVNode("", true),
        !Vue.unref(environment.isMobile) && isZH.value && isLightTheme.value ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_3, [
          Vue.createVNode(SvgIcon.default, { icon: LogoOfPCInChineseWhiteIcon.default })
        ])) : Vue.createCommentVNode("", true),
        Vue.unref(environment.isMobile) && isZH.value ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_4, [
          Vue.createElementVNode("span", {
            class: Vue.normalizeClass(["logo", isLightTheme.value ? "light" : "dark"])
          }, [
            Vue.createVNode(SvgIcon.default, { icon: LogoOfMobileInChinese.default })
          ], 2),
          Vue.createElementVNode("span", _hoisted_5, [
            Vue.createVNode(SvgIcon.default, { icon: LogoTitleOfMobileInChinese.default })
          ])
        ])) : Vue.createCommentVNode("", true),
        isEN.value ? (Vue.openBlock(), Vue.createElementBlock("div", {
          key: 3,
          class: Vue.normalizeClass(["pc-en-logo", { mobile: Vue.unref(environment.isMobile) }])
        }, [
          Vue.createElementVNode("span", _hoisted_6, [
            Vue.createVNode(SvgIcon.default, { icon: LogoInEnglish.default })
          ]),
          Vue.createElementVNode("span", {
            class: Vue.normalizeClass(["title", isLightTheme.value ? "light" : "dark"])
          }, [
            Vue.createVNode(SvgIcon.default, { icon: LogoTitleInEnglish.default })
          ], 2)
        ], 2)) : Vue.createCommentVNode("", true)
      ]);
    };
  }
});
exports.default = _sfc_main;
