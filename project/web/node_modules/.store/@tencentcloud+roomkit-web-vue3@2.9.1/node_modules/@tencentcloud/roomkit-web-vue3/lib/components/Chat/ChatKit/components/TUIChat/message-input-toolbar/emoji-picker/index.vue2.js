"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
require("../../../../adapter-vue.js");
const faceLight = require("../../../../assets/icon/face-light.svg.js");
const faceDark = require("../../../../assets/icon/face-dark.svg.js");
const emojiPickerDialog = require("./emoji-picker-dialog.vue.js");
const index = require("../toolbar-item-container/index.vue.js");
const env = require("../../../../utils/env.js");
const config = require("../../config.js");
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  emits: ["sendMessage", "toggleComponent", "insertEmoji", "dialogShowInH5", "dialogCloseInH5", "changeToolbarDisplayType"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const faceIcon = config.default.getTheme() === "dark" ? faceDark.default : faceLight.default;
    const emits = __emit;
    const currentConversation = Vue.ref();
    const container = Vue.ref();
    TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.CONV, {
      currentConversation: (conversation) => {
        currentConversation.value = conversation;
      }
    });
    const onDialogShow = (dialogRef) => {
      if (!env.isH5) {
        return;
      }
      emits("changeToolbarDisplayType", "emojiPicker");
      emits("dialogShowInH5", dialogRef.value);
    };
    const onDialogClose = (dialogRef) => {
      if (!env.isH5) {
        return;
      }
      emits("changeToolbarDisplayType", "none");
      emits("dialogCloseInH5", dialogRef.value);
    };
    const insertEmoji = (emojiObj) => {
      emits("insertEmoji", emojiObj);
    };
    const sendMessage = () => {
      emits("sendMessage");
    };
    const onClose = () => {
      var _a;
      (_a = container.value) == null ? void 0 : _a.toggleDialogDisplay(false);
    };
    __expose({
      closeEmojiPicker: onClose
    });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(index.default, {
        ref_key: "container",
        ref: container,
        iconFile: Vue.unref(faceIcon),
        title: "表情",
        onOnDialogShow: onDialogShow,
        onOnDialogClose: onDialogClose
      }, {
        default: Vue.withCtx(() => [
          Vue.createVNode(emojiPickerDialog.default, {
            onInsertEmoji: insertEmoji,
            onSendMessage: sendMessage,
            onOnClose: onClose
          })
        ]),
        _: 1
      }, 8, ["iconFile"]);
    };
  }
});
exports.default = _sfc_main;
