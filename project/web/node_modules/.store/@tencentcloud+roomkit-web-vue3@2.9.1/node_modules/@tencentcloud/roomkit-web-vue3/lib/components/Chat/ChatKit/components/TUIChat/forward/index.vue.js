"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const index$1 = require("../../common/Overlay/index.vue.js");
const index$2 = require("../../common/Transfer/index.vue.js");
const index = require("../../common/Toast/index.js");
const env = require("../../../utils/env.js");
const utils = require("../utils/utils.js");
const index$3 = require("../offlinePushInfoManager/index.js");
const type = require("../../common/Toast/type.js");
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  emits: ["toggleMultipleSelectMode"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    let selectedToForwardMessageIDList = [];
    let isMergeForward = false;
    const isShowForwardPanel = Vue.ref(false);
    const customConversationList = Vue.ref();
    Vue.onMounted(() => {
      TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.CUSTOM, {
        singleForwardMessageID: onSingleForwardMessageIDUpdated,
        multipleForwardMessageID: onMultipleForwardMessageIDUpdated
      });
    });
    Vue.onUnmounted(() => {
      TUIChatEngine.TUIStore.unwatch(TUIChatEngine.StoreName.CUSTOM, {
        singleForwardMessageID: onSingleForwardMessageIDUpdated,
        multipleForwardMessageID: onMultipleForwardMessageIDUpdated
      });
      clearStoreData();
    });
    function onSingleForwardMessageIDUpdated(messageID) {
      if (typeof messageID !== "undefined") {
        isMergeForward = false;
        selectedToForwardMessageIDList = [messageID];
        openForwardPanel();
      }
    }
    function onMultipleForwardMessageIDUpdated(params) {
      if (!params) {
        return;
      }
      isMergeForward = false;
      const {
        isMergeForward: _isMergeForward,
        messageIDList: selectedMessageIDList
      } = params || {};
      if ((selectedMessageIDList == null ? void 0 : selectedMessageIDList.length) > 0) {
        isMergeForward = _isMergeForward;
        selectedToForwardMessageIDList = selectedMessageIDList;
        openForwardPanel();
      } else {
        index.Toast({
          message: TUIChatEngine.TUITranslateService.t("TUIChat.未选择消息"),
          type: type.default.ERROR
        });
      }
    }
    function clearStoreData() {
      TUIChatEngine.TUIStore.update(TUIChatEngine.StoreName.CUSTOM, "singleForwardMessageID", void 0);
      TUIChatEngine.TUIStore.update(TUIChatEngine.StoreName.CUSTOM, "multipleForwardMessageID", void 0);
    }
    function closeForwardPanel() {
      clearStoreData();
      isShowForwardPanel.value = false;
    }
    function openForwardPanel() {
      getTransforRenderDataList();
      isShowForwardPanel.value = true;
    }
    function finishSelected(selectedConvIDWrapperList) {
      if ((selectedConvIDWrapperList == null ? void 0 : selectedConvIDWrapperList.length) === 0) return;
      const selectedConversationList = selectedConvIDWrapperList.map((IDWrapper) => TUIChatEngine.TUIStore.getConversationModel(IDWrapper.userID));
      const unsentMessageQueue = selectedToForwardMessageIDList.map((messageID) => TUIChatEngine.TUIStore.getMessageModel(messageID)).sort((a, b) => a.time - b.time);
      const forwardPromises = selectedConversationList.map((conversation) => {
        const offlinePushInfoCreateParams = {
          conversation,
          messageType: TUIChatEngine.TYPES.MSG_MERGER
        };
        return TUIChatEngine.TUIChatService.sendForwardMessage(
          [conversation],
          unsentMessageQueue,
          {
            needMerge: isMergeForward,
            offlinePushInfo: index$3.default.create(offlinePushInfoCreateParams),
            params: {
              needReadReceipt: utils.isEnabledMessageReadReceiptGlobal()
            }
          }
        );
      });
      Promise.allSettled(forwardPromises).then((results) => {
        for (const result of results) {
          const { status } = result;
          if (status === "rejected") {
            const errorMessage = result.reason.code === 80001 ? TUIChatEngine.TUITranslateService.t("TUIChat.内容包含敏感词汇") : result.reason.message;
            index.Toast({
              message: errorMessage,
              type: type.default.ERROR
            });
            break;
          }
        }
      });
      closeForwardPanel();
      emits("toggleMultipleSelectMode", false);
    }
    function getTransforRenderDataList() {
      const conversationList = TUIChatEngine.TUIStore.getData(TUIChatEngine.StoreName.CONV, "conversationList");
      customConversationList.value = conversationList.map((conversation) => {
        return {
          // To achieve reusability of Transfer, userID is used here instead of ConversationID
          userID: conversation.conversationID,
          nick: conversation.getShowName(),
          avatar: conversation.getAvatar()
        };
      });
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(index$1.default, {
        visible: Vue.unref(isShowForwardPanel),
        useMask: false
      }, {
        default: Vue.withCtx(() => [
          Vue.createVNode(index$2.default, {
            title: Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.转发"),
            isSearch: false,
            isCustomItem: false,
            list: Vue.unref(customConversationList),
            isHiddenBackIcon: Vue.unref(env.isUniFrameWork),
            onCancel: closeForwardPanel,
            onSubmit: finishSelected
          }, null, 8, ["title", "list", "isHiddenBackIcon"])
        ]),
        _: 1
      }, 8, ["visible"]);
    };
  }
});
exports.default = _sfc_main;
