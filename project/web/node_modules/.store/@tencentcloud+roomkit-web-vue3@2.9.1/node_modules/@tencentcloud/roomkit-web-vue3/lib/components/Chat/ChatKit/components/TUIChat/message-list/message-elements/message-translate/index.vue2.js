"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const Icon = require("../../../../common/Icon.vue.js");
const translationContent = require("./translation-content.vue.js");
const checkSm = require("../../../../../assets/icon/check-sm.svg.js");
const _hoisted_1 = { class: "copyright" };
const _hoisted_2 = { class: "copyright-text" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    message: { default: () => ({}) }
  },
  setup(__props) {
    const props = __props;
    const translationVisible = Vue.ref(false);
    const hasTranslationError = Vue.ref(false);
    const translationWrapperRef = Vue.ref();
    let isSingleTranslation = true;
    Vue.onMounted(() => {
      TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.CHAT, {
        translateTextInfo: onMessageTranslationUpdated
      });
    });
    Vue.onUnmounted(() => {
      TUIChatEngine.TUIStore.unwatch(TUIChatEngine.StoreName.CHAT, {
        translateTextInfo: onMessageTranslationUpdated
      });
    });
    function toggleErrorStatus(hasError) {
      hasTranslationError.value = hasError;
    }
    function onMessageTranslationUpdated(info) {
      if (info === void 0) return;
      isSingleTranslation = false;
      const translationInfoList = info.get(props.message.conversationID) || [];
      for (let i = 0; i < translationInfoList.length; ++i) {
        const { messageID, visible } = translationInfoList[i];
        if (messageID === props.message.ID && visible !== void 0) {
          if (translationInfoList.length === 1 && visible) {
            isSingleTranslation = true;
          }
          hasTranslationError.value = false;
          translationVisible.value = visible;
          break;
        }
      }
    }
    return (_ctx, _cache) => {
      return Vue.unref(translationVisible) ? (Vue.openBlock(), Vue.createElementBlock("div", {
        key: 0,
        ref_key: "translationWrapperRef",
        ref: translationWrapperRef,
        class: Vue.normalizeClass({
          "message-translation": true,
          "reverse": props.message.flow === "out",
          "error": Vue.unref(hasTranslationError)
        })
      }, [
        Vue.createVNode(translationContent.default, {
          message: props.message,
          translationContentVisible: Vue.unref(translationVisible),
          translationWrapperRef: Vue.unref(translationWrapperRef),
          isSingleTranslation: Vue.unref(isSingleTranslation),
          onToggleErrorStatus: toggleErrorStatus
        }, null, 8, ["message", "translationContentVisible", "translationWrapperRef", "isSingleTranslation"]),
        Vue.createElementVNode("div", _hoisted_1, [
          Vue.createVNode(Icon.default, {
            file: Vue.unref(checkSm.default),
            size: "13px"
          }, null, 8, ["file"]),
          Vue.createElementVNode("div", _hoisted_2, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.由IM提供翻译支持")), 1)
        ])
      ], 2)) : Vue.createCommentVNode("", true);
    };
  }
});
exports.default = _sfc_main;
