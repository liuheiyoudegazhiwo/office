import { extname, relative, resolve } from 'path';
import { fileURLToPath } from 'node:url';
import { glob } from 'glob';
import { defineConfig } from 'vite';
import dts from 'vite-plugin-dts';
import vue from '@vitejs/plugin-vue';
import { libInjectCss } from 'vite-plugin-lib-inject-css';
import { viteStaticCopy } from 'vite-plugin-static-copy';
import { peerDependencies } from './package.json';

export default defineConfig({
  resolve: {
    alias: {
      '@': resolve(__dirname, '/src'),
    },
  },
  build: {
    cssMinify: false,
    minify: false,
    lib: {
      entry: resolve(__dirname, 'src/index.ts'),
      formats: ['es'],
    },
    rollupOptions: {
      external: [
        ...Object.keys(peerDependencies),
      ],
      input: getInputEntries(),
      output: {
        assetFileNames: 'styles/index[extname]',
        entryFileNames: '[name].js',
      },
    },
  },
  plugins: [
    vue(),
    libInjectCss(),
    dts({
      include: ['src/**/*.ts', 'src/**/*.vue'],
    }),
    viteStaticCopy({
      targets: [
        {
          src: './src/providers/UIKitProvider/styles',
          dest: 'styles',
        },
      ],
    }),
  ],
  css: {
    preprocessorOptions: {
      scss: {
        api: 'modern-compiler',
      },
    },
  },
});

function getInputEntries() {
  const inputEntries = Object.fromEntries(
    glob.sync('src/**/*.{ts,vue}', {
      ignore: ['src/stories/**']
    }).map(file => [
      relative(
        'src',
        file.slice(0, file.length - extname(file).length),
      ),
      fileURLToPath(new URL(file, import.meta.url)),
    ]),
  );
  return inputEntries;
}
