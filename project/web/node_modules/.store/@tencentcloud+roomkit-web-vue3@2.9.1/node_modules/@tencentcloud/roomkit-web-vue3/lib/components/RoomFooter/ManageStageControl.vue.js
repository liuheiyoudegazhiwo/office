"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const pinia = require("pinia");
const IconButton = require("../common/base/IconButton.vue.js");
const StageApplicationIcon = require("../common/icons/StageApplicationIcon.vue.js");
const basic = require("../../stores/basic.js");
const room = require("../../stores/room.js");
const index = require("../../locales/index.js");
const Badge = require("../common/base/Badge.vue.js");
const environment = require("../../utils/environment.js");
const index$1 = require("./ApplyControl/MasterApplyControl/index.js");
const useMasterApplyControl = require("../../hooks/useMasterApplyControl.js");
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "ManageStageControl",
  setup(__props) {
    const { t } = index.useI18n();
    const basicStore = basic.useBasicStore();
    const roomStore = room.useRoomStore();
    const { handleShowNotification } = useMasterApplyControl.default();
    const { sidebarName, showApplyUserList } = pinia.storeToRefs(basicStore);
    const { applyToAnchorList } = pinia.storeToRefs(roomStore);
    function toggleManageStage() {
      if (!environment.isMobile) {
        basicStore.setShowApplyUserList(!showApplyUserList.value);
      } else {
        if (basicStore.isSidebarOpen && basicStore.sidebarName === "apply") {
          basicStore.setSidebarOpenStatus(false);
          basicStore.setSidebarName("");
          return;
        }
        basicStore.setSidebarOpenStatus(true);
        basicStore.setSidebarName("apply");
      }
    }
    handleShowNotification();
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", null, [
        Vue.createVNode(Badge.default, {
          hidden: Vue.unref(applyToAnchorList).length === 0,
          value: Vue.unref(applyToAnchorList).length,
          max: 10,
          type: "danger"
        }, {
          default: Vue.withCtx(() => [
            Vue.createVNode(IconButton.default, {
              title: Vue.unref(t)("Apply to stage"),
              icon: StageApplicationIcon.default,
              "is-active": Vue.unref(sidebarName) === "apply",
              onClickIcon: toggleManageStage
            }, null, 8, ["title", "is-active"])
          ]),
          _: 1
        }, 8, ["hidden", "value"]),
        Vue.withDirectives(Vue.createVNode(Vue.unref(index$1.default), null, null, 512), [
          [Vue.vShow, Vue.unref(showApplyUserList)]
        ])
      ]);
    };
  }
});
exports.default = _sfc_main;
