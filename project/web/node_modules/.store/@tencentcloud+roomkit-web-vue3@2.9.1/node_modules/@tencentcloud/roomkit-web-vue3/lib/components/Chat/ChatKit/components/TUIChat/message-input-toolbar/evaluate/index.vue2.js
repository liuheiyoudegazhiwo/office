"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
require("../../../../adapter-vue.js");
const index = require("../toolbar-item-container/index.vue.js");
const evaluteLight = require("../../../../assets/icon/evalute-light.svg.js");
const evaluteDark = require("../../../../assets/icon/evalute-dark.svg.js");
const documentLink = require("../../../../utils/documentLink.js");
const Icon = require("../../../common/Icon.vue.js");
const star = require("../../../../assets/icon/star.png.js");
const starLight = require("../../../../assets/icon/star-light.png.js");
const constant = require("../../../../constant.js");
const env = require("../../../../utils/env.js");
const utils = require("../../utils/utils.js");
const index$1 = require("../../offlinePushInfoManager/index.js");
const config = require("../../config.js");
const _hoisted_1 = ["onClick"];
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    starTotal: {
      type: Number,
      default: 5
    }
  },
  emits: ["onDialogPopupShowOrHide"],
  setup(__props, { emit: __emit }) {
    const evaluateIcon = config.default.getTheme() === "dark" ? evaluteDark.default : evaluteLight.default;
    const props = __props;
    const emits = __emit;
    const container = Vue.ref();
    const starList = Vue.ref(props.starTotal);
    const currentStarIndex = Vue.ref(-1);
    const comment = Vue.ref("");
    const currentConversation = Vue.ref();
    TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.CONV, {
      currentConversation: (conversation) => {
        currentConversation.value = conversation;
      }
    });
    const isEvaluateValid = Vue.computed(() => comment.value.length || currentStarIndex.value >= 0);
    const onDialogShow = () => {
      emits("onDialogPopupShowOrHide", true);
    };
    const onDialogClose = () => {
      resetEvaluate();
      emits("onDialogPopupShowOrHide", false);
    };
    const openLink = () => {
      var _a, _b;
      if (env.isPC || env.isH5) {
        window.open((_b = (_a = documentLink.default) == null ? void 0 : _a.customMessage) == null ? void 0 : _b.url);
      }
    };
    const closeDialog = () => {
      var _a;
      (_a = container == null ? void 0 : container.value) == null ? void 0 : _a.toggleDialogDisplay(false);
    };
    const resetEvaluate = () => {
      currentStarIndex.value = -1;
      comment.value = "";
    };
    const selectStar = (starIndex) => {
      if (currentStarIndex.value === starIndex) {
        currentStarIndex.value = currentStarIndex.value - 1;
      } else {
        currentStarIndex.value = starIndex;
      }
    };
    const submitEvaluate = () => {
      var _a, _b, _c, _d, _e, _f;
      if (currentStarIndex.value < 0 && !comment.value.length) {
        return;
      }
      const payload = {
        data: JSON.stringify({
          businessID: constant.CHAT_MSG_CUSTOM_TYPE.EVALUATE,
          version: 1,
          score: currentStarIndex.value + 1,
          comment: comment.value
        }),
        description: "对本次的服务评价",
        extension: "对本次的服务评价"
      };
      const options = {
        to: ((_b = (_a = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a.groupProfile) == null ? void 0 : _b.groupID) || ((_d = (_c = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c.userProfile) == null ? void 0 : _d.userID),
        conversationType: (_e = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _e.type,
        payload,
        needReadReceipt: utils.isEnabledMessageReadReceiptGlobal()
      };
      const offlinePushInfoCreateParams = {
        conversation: currentConversation.value,
        payload: options.payload,
        messageType: TUIChatEngine.TYPES.MSG_CUSTOM
      };
      const sendMessageOptions = {
        offlinePushInfo: index$1.default.create(offlinePushInfoCreateParams)
      };
      TUIChatEngine.TUIChatService.sendCustomMessage(options, sendMessageOptions);
      (_f = container == null ? void 0 : container.value) == null ? void 0 : _f.toggleDialogDisplay(false);
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(index.default, {
        ref_key: "container",
        ref: container,
        iconFile: Vue.unref(evaluateIcon),
        title: "评价",
        needBottomPopup: true,
        iconWidth: Vue.unref(env.isUniFrameWork) ? "26px" : "20px",
        iconHeight: Vue.unref(env.isUniFrameWork) ? "26px" : "20px",
        onOnDialogShow: onDialogShow,
        onOnDialogClose: onDialogClose
      }, {
        default: Vue.withCtx(() => [
          Vue.createElementVNode("div", {
            class: Vue.normalizeClass(["evaluate", !Vue.unref(env.isPC) && "evaluate-h5"])
          }, [
            Vue.createElementVNode("div", {
              class: Vue.normalizeClass(["evaluate-header", !Vue.unref(env.isPC) && "evaluate-h5-header"])
            }, [
              Vue.createElementVNode("div", {
                class: Vue.normalizeClass([
                  "evaluate-header-content",
                  !Vue.unref(env.isPC) && "evaluate-h5-header-content"
                ])
              }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("Evaluate.请对本次服务进行评价")), 3),
              !Vue.unref(env.isPC) ? (Vue.openBlock(), Vue.createElementBlock("div", {
                key: 0,
                class: Vue.normalizeClass([
                  "evaluate-header-close",
                  !Vue.unref(env.isPC) && "evaluate-h5-header-close"
                ]),
                onClick: Vue.withModifiers(closeDialog, ["stop"])
              }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("关闭")), 3)) : Vue.createCommentVNode("", true)
            ], 2),
            Vue.createElementVNode("div", {
              class: Vue.normalizeClass(["evaluate-content", !Vue.unref(env.isPC) && "evaluate-h5-content"])
            }, [
              Vue.createElementVNode("ul", {
                class: Vue.normalizeClass([
                  "evaluate-content-list",
                  !Vue.unref(env.isPC) && "evaluate-h5-content-list"
                ])
              }, [
                (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(Vue.unref(starList), (item, index2) => {
                  return Vue.openBlock(), Vue.createElementBlock("li", {
                    key: index2,
                    class: Vue.normalizeClass([
                      "evaluate-content-list-item",
                      !Vue.unref(env.isPC) && "evaluate-h5-content-list-item"
                    ]),
                    onClick: Vue.withModifiers(($event) => selectStar(index2), ["stop"])
                  }, [
                    index2 <= Vue.unref(currentStarIndex) ? (Vue.openBlock(), Vue.createBlock(Icon.default, {
                      key: 0,
                      file: Vue.unref(starLight.default),
                      width: Vue.unref(env.isPC) ? "20px" : "30px",
                      height: Vue.unref(env.isPC) ? "20px" : "30px"
                    }, null, 8, ["file", "width", "height"])) : (Vue.openBlock(), Vue.createBlock(Icon.default, {
                      key: 1,
                      file: Vue.unref(star.default),
                      width: Vue.unref(env.isPC) ? "20px" : "30px",
                      height: Vue.unref(env.isPC) ? "20px" : "30px"
                    }, null, 8, ["file", "width", "height"]))
                  ], 10, _hoisted_1);
                }), 128))
              ], 2),
              Vue.withDirectives(Vue.createElementVNode("textarea", {
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => Vue.isRef(comment) ? comment.value = $event : null),
                class: Vue.normalizeClass([
                  "evaluate-content-text",
                  !Vue.unref(env.isPC) && "evaluate-h5-content-text"
                ])
              }, null, 2), [
                [Vue.vModelText, Vue.unref(comment)]
              ]),
              Vue.createElementVNode("div", {
                class: Vue.normalizeClass([
                  "evaluate-content-button",
                  !Vue.unref(env.isPC) && "evaluate-h5-content-button"
                ])
              }, [
                Vue.createElementVNode("button", {
                  class: Vue.normalizeClass(["btn", Vue.unref(isEvaluateValid) ? "btn-valid" : "btn-invalid"]),
                  onClick: submitEvaluate
                }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("Evaluate.提交评价")), 3)
              ], 2)
            ], 2),
            Vue.createElementVNode("div", {
              class: Vue.normalizeClass(["evaluate-adv", !Vue.unref(env.isPC) && "evaluate-h5-adv"])
            }, [
              Vue.createTextVNode(Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("Evaluate.服务评价工具")) + " " + Vue.toDisplayString("(" + Vue.unref(TUIChatEngine.TUITranslateService).t("Evaluate.使用")) + " ", 1),
              Vue.createElementVNode("a", {
                onClick: _cache[1] || (_cache[1] = ($event) => openLink(Vue.unref(documentLink.default).customMessage))
              }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t(`Evaluate.${Vue.unref(documentLink.default).customMessage.label}`)), 1),
              Vue.createTextVNode(" " + Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("Evaluate.搭建") + ")"), 1)
            ], 2)
          ], 2)
        ]),
        _: 1
      }, 8, ["iconFile", "iconWidth", "iconHeight"]);
    };
  }
});
exports.default = _sfc_main;
