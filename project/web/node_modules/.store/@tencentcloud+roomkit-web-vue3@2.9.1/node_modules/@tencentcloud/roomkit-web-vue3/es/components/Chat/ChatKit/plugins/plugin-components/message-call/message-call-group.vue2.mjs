import { defineComponent, computed, createElementBlock, createCommentVNode, unref, openBlock, normalizeClass, toDisplayString } from "vue";
import "../../../adapter-vue.mjs";
import TUIChatEngine from "@tencentcloud/chat-uikit-engine";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "message-call-group",
  props: {
    message: { default: () => ({}) },
    signalingInfo: { default: () => ({}) },
    customContent: { default: () => ({}) },
    blinkMessageIDList: { default: () => [] }
  },
  setup(__props) {
    const props = __props;
    const TYPES = TUIChatEngine.TYPES;
    const isCallMessage = computed(() => !!props.signalingInfo);
    const conversationType = computed(() => {
      var _a;
      return (_a = props.message) == null ? void 0 : _a.conversationType;
    });
    const custom = computed(() => {
      var _a;
      return (_a = props.customContent) == null ? void 0 : _a.custom;
    });
    const isBlink = computed(() => {
      var _a, _b;
      if ((_a = props.message) == null ? void 0 : _a.ID) {
        return (_b = props.blinkMessageIDList) == null ? void 0 : _b.includes(props.message.ID);
      }
      return false;
    });
    return (_ctx, _cache) => {
      return unref(isCallMessage) && unref(conversationType) === unref(TYPES).CONV_GROUP ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass({ "blink-text": unref(isBlink) })
      }, toDisplayString(unref(custom)), 3)) : createCommentVNode("", true);
    };
  }
});
export {
  _sfc_main as default
};
