"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const useRoomInviteHooks = require("./useRoomInviteHooks.js");
const SvgIcon = require("../common/base/SvgIcon.vue.js");
const Button = require("../common/base/Button.vue.js");
const Contacts = require("../ScheduleConference/Contacts.vue.js");
const SuccessIcon = require("../common/icons/SuccessIcon.vue.js");
const CopyIcon = require("../common/icons/CopyIcon.vue.js");
const index = require("../common/base/Dialog/index.js");
const _hoisted_1 = { class: "invite-container" };
const _hoisted_2 = ["onClick"];
const _hoisted_3 = { class: "invite-title" };
const _hoisted_4 = { class: "invite-member" };
const _hoisted_5 = { class: "invite-member-container" };
const _hoisted_6 = { class: "invite-member-title" };
const _hoisted_7 = ["title"];
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "indexPC",
  setup(__props) {
    const {
      t,
      invitationFeatureDetails,
      showContacts,
      contactsConfirm,
      contacts,
      remoteEnteredUserList,
      isShowRoomShareForm,
      userId,
      userName,
      inviteInfoList,
      onCopy,
      copyRoomIdAndRoomLink
    } = useRoomInviteHooks.default();
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
        (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(Vue.unref(invitationFeatureDetails), (item, index2) => {
          return Vue.openBlock(), Vue.createElementBlock("div", {
            key: index2,
            class: "invite-item",
            onClick: ($event) => item.function()
          }, [
            Vue.createVNode(SvgIcon.default, {
              class: "icon",
              icon: item.icon
            }, null, 8, ["icon"]),
            Vue.createElementVNode("span", _hoisted_3, Vue.toDisplayString(Vue.unref(t)(item.text)), 1)
          ], 8, _hoisted_2);
        }), 128)),
        Vue.createVNode(Contacts.default, {
          visible: Vue.unref(showContacts),
          contacts: Vue.unref(contacts),
          "disabled-list": Vue.unref(remoteEnteredUserList),
          onInput: _cache[0] || (_cache[0] = ($event) => showContacts.value = $event),
          onConfirm: Vue.unref(contactsConfirm)
        }, null, 8, ["visible", "contacts", "disabled-list", "onConfirm"]),
        Vue.createVNode(Vue.unref(index.default), {
          modelValue: Vue.unref(isShowRoomShareForm),
          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => Vue.isRef(isShowRoomShareForm) ? isShowRoomShareForm.value = $event : null),
          title: Vue.unref(t)("sb invites you to join the conference", { name: Vue.unref(userName) || Vue.unref(userId) }),
          modal: true,
          "show-close": true,
          "close-on-click-modal": true,
          width: "540px",
          "append-to-body": true,
          "title-icon": SuccessIcon.default
        }, {
          footer: Vue.withCtx(() => [
            Vue.createElementVNode("span", null, [
              Vue.createVNode(Button.default, {
                class: "dialog-button",
                size: "default",
                onClick: _cache[1] || (_cache[1] = ($event) => Vue.unref(copyRoomIdAndRoomLink)())
              }, {
                default: Vue.withCtx(() => [
                  Vue.createTextVNode(Vue.toDisplayString(Vue.unref(t)("Copy the conference number and link")), 1)
                ]),
                _: 1
              })
            ])
          ]),
          default: Vue.withCtx(() => [
            Vue.createElementVNode("div", _hoisted_4, [
              (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(Vue.unref(inviteInfoList), (item) => {
                return Vue.withDirectives((Vue.openBlock(), Vue.createElementBlock("div", {
                  key: item.title
                }, [
                  Vue.createElementVNode("div", _hoisted_5, [
                    Vue.createElementVNode("span", _hoisted_6, Vue.toDisplayString(Vue.unref(t)(item.title)), 1),
                    Vue.createElementVNode("span", {
                      class: "invite-member-content",
                      title: item.content
                    }, Vue.toDisplayString(item.content), 9, _hoisted_7),
                    item.isShowCopyIcon ? (Vue.openBlock(), Vue.createBlock(SvgIcon.default, {
                      key: 0,
                      class: "copy",
                      icon: CopyIcon.default,
                      onClick: ($event) => Vue.unref(onCopy)(item.content)
                    }, null, 8, ["onClick"])) : Vue.createCommentVNode("", true)
                  ])
                ])), [
                  [Vue.vShow, item.isVisible]
                ]);
              }), 128))
            ])
          ]),
          _: 1
        }, 8, ["modelValue", "title"])
      ]);
    };
  }
});
exports.default = _sfc_main;
