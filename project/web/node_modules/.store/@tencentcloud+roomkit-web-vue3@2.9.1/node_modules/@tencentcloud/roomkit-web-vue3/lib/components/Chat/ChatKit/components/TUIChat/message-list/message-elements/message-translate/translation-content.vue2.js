"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const universalApi = require("@tencentcloud/universal-api");
const translation = require("../../../utils/translation.js");
const _hoisted_1 = ["src"];
const _hoisted_2 = {
  key: 1,
  class: "text-plain"
};
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "translation-content",
  props: {
    message: { default: () => ({}) },
    translationContentVisible: { type: Boolean },
    isSingleTranslation: { type: Boolean },
    translationWrapperRef: {}
  },
  emits: ["toggleErrorStatus"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const props = __props;
    const translationFinished = Vue.ref(false);
    const translationErrorText = Vue.ref("");
    const translationTextList = Vue.ref([]);
    const calculateHeight = Vue.ref(0);
    const calculateWidth = Vue.ref(0);
    const translationLoadingRef = Vue.ref();
    const translationContentRef = Vue.ref();
    Vue.watch(() => props.translationContentVisible, (newVal) => {
      if (newVal) {
        translation.translator.get(props.message).then((result) => {
          translationFinished.value = true;
          translationTextList.value = result;
          Vue.nextTick(() => {
            const { height: originHeight, width: originWidth } = universalApi.getBoundingClientRectSync(translationLoadingRef.value);
            const { height, width } = universalApi.getBoundingClientRectSync(translationContentRef.value);
            calculateHeight.value = originHeight;
            calculateWidth.value = originWidth;
            requestAnimationFrame(() => {
              calculateHeight.value = height;
              calculateWidth.value = width;
              if (props.isSingleTranslation) {
                Vue.nextTick(() => {
                  const { bottom } = universalApi.getBoundingClientRectSync(props.translationWrapperRef);
                  const { bottom: bottomWindow } = universalApi.getBoundingClientRectSync("#messageScrollList");
                  if (bottom > bottomWindow) {
                    const timer = setTimeout(() => {
                      props.translationWrapperRef.scrollIntoView({ block: "end", behavior: "smooth" });
                      clearTimeout(timer);
                    }, 150);
                  }
                });
              }
            });
          });
        }).catch((err) => {
          translationFinished.value = true;
          const { height: originHeight } = universalApi.getBoundingClientRectSync(translationLoadingRef.value);
          calculateHeight.value = originHeight;
          translationTextList.value = [];
          emits("toggleErrorStatus", true);
          translationErrorText.value = err.message;
        });
      }
    }, { immediate: true });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", {
        class: "message-translation-container",
        style: Vue.normalizeStyle({
          height: Vue.unref(calculateHeight) > 0 ? `${Vue.unref(calculateHeight)}px` : "auto",
          width: Vue.unref(calculateWidth) > 0 ? `${Vue.unref(calculateWidth)}px` : "auto"
        })
      }, [
        Vue.unref(translationFinished) ? (Vue.openBlock(), Vue.createElementBlock("div", {
          key: 0,
          ref_key: "translationContentRef",
          ref: translationContentRef,
          class: Vue.normalizeClass({
            "translation-content": true,
            "occur": Vue.unref(calculateHeight) > 0
          })
        }, [
          Vue.unref(translationTextList).length > 0 ? (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, { key: 0 }, Vue.renderList(Vue.unref(translationTextList), (text, index) => {
            return Vue.openBlock(), Vue.createElementBlock("span", { key: index }, [
              text.type === "face" ? (Vue.openBlock(), Vue.createElementBlock("img", {
                key: 0,
                class: "text-face",
                src: text.value
              }, null, 8, _hoisted_1)) : (Vue.openBlock(), Vue.createElementBlock("span", _hoisted_2, Vue.toDisplayString(text.value), 1))
            ]);
          }), 128)) : (Vue.openBlock(), Vue.createElementBlock(Vue.Fragment, { key: 1 }, [
            Vue.createTextVNode(Vue.toDisplayString(Vue.unref(translationErrorText)), 1)
          ], 64))
        ], 2)) : Vue.createCommentVNode("", true),
        Vue.createElementVNode("div", {
          ref_key: "translationLoadingRef",
          ref: translationLoadingRef,
          class: Vue.normalizeClass({
            "loading": true,
            "loading-end": Vue.unref(translationFinished)
          })
        }, Vue.toDisplayString(Vue.unref(TUIChatEngine.TUITranslateService).t("TUIChat.翻译中")) + "... ", 3)
      ], 4);
    };
  }
});
exports.default = _sfc_main;
