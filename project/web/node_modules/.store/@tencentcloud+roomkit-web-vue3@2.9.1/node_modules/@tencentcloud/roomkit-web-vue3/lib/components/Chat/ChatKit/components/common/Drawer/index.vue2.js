"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../adapter-vue.js");
const index = require("../Overlay/index.vue.js");
const _hoisted_1 = { class: "drawer-container" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    visible: { type: Boolean, default: true },
    popDirection: { default: "bottom" },
    useMask: { type: Boolean, default: true },
    isFullScreen: { type: Boolean, default: true },
    overlayColor: {},
    drawerStyle: { default: () => ({}) }
  },
  emits: ["onOverlayClick"],
  setup(__props, { expose: __expose, emit: __emit }) {
    var _a;
    const emits = __emit;
    const props = __props;
    const drawerDomRef = Vue.ref();
    const overlayDomInstanceRef = Vue.ref();
    const isDrawerShow = Vue.ref(false);
    const styles = Vue.ref(props.drawerStyle[props.popDirection] || {});
    Vue.watch(() => props.visible, (visible) => {
      if (visible) {
        isDrawerShow.value = true;
      } else {
        setTimeout(() => {
          isDrawerShow.value = false;
        }, 150);
      }
    }, {
      immediate: true
    });
    function onOverlayClick(e) {
      emits("onOverlayClick", e);
    }
    __expose({
      drawerDomRef,
      overlayDomRef: (_a = overlayDomInstanceRef.value) == null ? void 0 : _a.overlayDomRef
    });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(index.default, {
        ref_key: "overlayDomInstanceRef",
        ref: overlayDomInstanceRef,
        visible: props.visible,
        useMask: props.useMask,
        maskColor: props.overlayColor,
        isFullScreen: props.isFullScreen,
        onOnOverlayClick: onOverlayClick
      }, {
        default: Vue.withCtx(() => [
          Vue.unref(isDrawerShow) ? (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 0,
            ref_key: "drawerDomRef",
            ref: drawerDomRef,
            class: Vue.normalizeClass({
              "drawer": true,
              "origin-bottom": props.popDirection === "bottom",
              "origin-right": props.popDirection === "right",
              "slide-bottom": _ctx.visible && props.popDirection === "bottom",
              "slide-right": _ctx.visible && props.popDirection === "right"
            }),
            style: Vue.normalizeStyle({
              minHeight: Vue.unref(styles).minHeight,
              maxHeight: Vue.unref(styles).maxHeight,
              borderRadius: Vue.unref(styles).borderRadius,
              boxShadow: Vue.unref(styles).boxShadow,
              width: Vue.unref(styles).width
            })
          }, [
            Vue.createElementVNode("div", _hoisted_1, [
              Vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
            ])
          ], 6)) : Vue.createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["visible", "useMask", "maskColor", "isFullScreen"]);
    };
  }
});
exports.default = _sfc_main;
