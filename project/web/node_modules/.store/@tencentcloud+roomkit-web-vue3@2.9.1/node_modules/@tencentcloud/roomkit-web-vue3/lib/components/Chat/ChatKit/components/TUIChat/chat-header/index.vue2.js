"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
require("../../../adapter-vue.js");
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const TUICore = require("@tencentcloud/tui-core");
const Icon = require("../../common/Icon.vue.js");
const back = require("../../../assets/icon/back.svg.js");
const env = require("../../../utils/env.js");
const config = require("../config.js");
const _hoisted_1 = { class: "chat-header-container" };
const _hoisted_2 = ["onClick"];
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "index",
  props: {
    headerExtensionList: { default: () => [] }
  },
  emits: ["closeChat"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const currentConversation = Vue.ref();
    const currentConversationName = Vue.ref("");
    const typingStatus = Vue.ref(false);
    const groupID = Vue.ref("");
    const isNotRoomChat = Vue.ref(config.default.getChatType() !== TUICore.TUIConstants.TUIChat.TYPE.ROOM);
    Vue.onMounted(() => {
      TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.CONV, {
        currentConversation: onCurrentConversationUpdated
      });
      TUIChatEngine.TUIStore.watch(TUIChatEngine.StoreName.CHAT, {
        typingStatus: onTypingStatusUpdated
      });
    });
    Vue.onUnmounted(() => {
      TUIChatEngine.TUIStore.unwatch(TUIChatEngine.StoreName.CONV, {
        currentConversation: onCurrentConversationUpdated
      });
      TUIChatEngine.TUIStore.unwatch(TUIChatEngine.StoreName.CHAT, {
        typingStatus: onTypingStatusUpdated
      });
    });
    const closeChat = (conversationID) => {
      emits("closeChat", conversationID);
    };
    const handleExtensions = (item) => {
      var _a, _b;
      (_b = (_a = item.listener).onClicked) == null ? void 0 : _b.call(_a, { groupID: groupID.value });
    };
    function onCurrentConversationUpdated(conversation) {
      var _a, _b, _c;
      currentConversation.value = conversation;
      groupID.value = (_b = (_a = currentConversation.value) == null ? void 0 : _a.groupProfile) == null ? void 0 : _b.groupID;
      currentConversationName.value = (_c = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c.getShowName();
    }
    function onTypingStatusUpdated(status) {
      var _a;
      typingStatus.value = status;
      if (typingStatus.value) {
        currentConversationName.value = TUIChatEngine.TUITranslateService.t("TUIChat.对方正在输入");
      } else {
        currentConversationName.value = ((_a = currentConversation.value) == null ? void 0 : _a.getShowName()) || "";
      }
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", {
        class: Vue.normalizeClass(["chat-header", !Vue.unref(env.isPC) && "chat-header-h5"])
      }, [
        !Vue.unref(env.isPC) && Vue.unref(isNotRoomChat) ? (Vue.openBlock(), Vue.createElementBlock("div", {
          key: 0,
          class: Vue.normalizeClass(["chat-header-back", !Vue.unref(env.isPC) && "chat-header-h5-back"]),
          onClick: _cache[0] || (_cache[0] = ($event) => closeChat(Vue.unref(currentConversation).conversationID))
        }, [
          Vue.createVNode(Icon.default, { file: Vue.unref(back.default) }, null, 8, ["file"])
        ], 2)) : Vue.createCommentVNode("", true),
        Vue.createElementVNode("div", _hoisted_1, [
          Vue.unref(isNotRoomChat) ? (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 0,
            class: Vue.normalizeClass(["chat-header-content", !Vue.unref(env.isPC) && "chat-header-h5-content"])
          }, Vue.toDisplayString(Vue.unref(currentConversationName)), 3)) : Vue.createCommentVNode("", true),
          _cache[1] || (_cache[1] = Vue.createElementVNode("div", null, null, -1))
        ]),
        Vue.createElementVNode("div", {
          class: Vue.normalizeClass(["chat-header-setting", !Vue.unref(env.isPC) && "chat-header-h5-setting"])
        }, [
          (Vue.openBlock(true), Vue.createElementBlock(Vue.Fragment, null, Vue.renderList(props.headerExtensionList, (item, index) => {
            return Vue.openBlock(), Vue.createElementBlock("div", {
              key: index,
              onClick: Vue.withModifiers(($event) => handleExtensions(item), ["stop"])
            }, [
              Vue.createVNode(Icon.default, {
                file: item.icon
              }, null, 8, ["file"])
            ], 8, _hoisted_2);
          }), 128))
        ], 2)
      ], 2);
    };
  }
});
exports.default = _sfc_main;
