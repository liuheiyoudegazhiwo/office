interface Props {
    userName: string;
    givenRoomId: string | null;
}
declare function getRoomParam(): {
    isOpenCamera: boolean;
    isOpenMicrophone: boolean;
    defaultCameraId: string;
    defaultMicrophoneId: string;
    defaultSpeakerId: string;
};
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Props>>, {
    getRoomParam: typeof getRoomParam;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update-user-name": (...args: any[]) => void;
    "create-room": (...args: any[]) => void;
    "enter-room": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Props>>> & Readonly<{
    "onUpdate-user-name"?: ((...args: any[]) => any) | undefined;
    "onCreate-room"?: ((...args: any[]) => any) | undefined;
    "onEnter-room"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
