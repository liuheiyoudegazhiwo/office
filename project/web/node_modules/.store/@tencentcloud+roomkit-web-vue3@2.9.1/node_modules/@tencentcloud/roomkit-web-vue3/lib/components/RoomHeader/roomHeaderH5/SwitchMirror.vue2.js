"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const Vue = require("vue");
const SvgIcon = require("../../common/base/SvgIcon.vue.js");
const basic = require("../../../stores/basic.js");
const MirrorIcon = require("../../common/icons/MirrorIcon.vue.js");
const useRoomEngine = require("../../../hooks/useRoomEngine.js");
const TUIRoomEngine = require("@tencentcloud/tuiroom-engine-js");
const vTap = require("../../../directives/vTap.js");
const _hoisted_1 = { class: "mirror-icon" };
const _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  __name: "SwitchMirror",
  setup(__props) {
    const roomEngine = useRoomEngine.default();
    const basicStore = basic.useBasicStore();
    function toogleMirrorStatus() {
      var _a;
      const trtcCloud = (_a = roomEngine.instance) == null ? void 0 : _a.getTRTCCloud();
      trtcCloud == null ? void 0 : trtcCloud.setLocalRenderParams({
        mirrorType: basicStore.isLocalStreamMirror ? TUIRoomEngine.TRTCVideoMirrorType.TRTCVideoMirrorType_Enable : TUIRoomEngine.TRTCVideoMirrorType.TRTCVideoMirrorType_Disable,
        rotation: TUIRoomEngine.TRTCVideoRotation.TRTCVideoRotation0,
        fillMode: TUIRoomEngine.TRTCVideoFillMode.TRTCVideoFillMode_Fill
      });
      basicStore.setIsLocalStreamMirror(basicStore.isLocalStreamMirror);
      basicStore.isLocalStreamMirror = !basicStore.isLocalStreamMirror;
    }
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1, [
        Vue.withDirectives(Vue.createVNode(SvgIcon.default, {
          icon: MirrorIcon.default,
          "custom-style": { backgroundSize: "50%" }
        }, null, 512), [
          [Vue.unref(vTap.default), toogleMirrorStatus]
        ])
      ]);
    };
  }
});
exports.default = _sfc_main;
