"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const TUIChatEngine = require("@tencentcloud/chat-uikit-engine");
const _Convertor = class _Convertor {
  constructor() {
    __publicField(this, "isUseCache", true);
    __publicField(this, "convertCache", /* @__PURE__ */ new Map());
  }
  static getInstance() {
    if (!_Convertor.instance) {
      _Convertor.instance = new _Convertor();
    }
    return _Convertor.instance;
  }
  async get(message) {
    if (this.isUseCache) {
      const cache = this.convertCache.get(message.ID);
      if (cache !== void 0) {
        return cache;
      }
    }
    const currentMessage = TUIChatEngine.TUIStore.getMessageModel(message.ID);
    if (!currentMessage) {
      return Promise.reject("message not found");
    }
    const response = await TUIChatEngine.TUIChatService.convertVoiceToText({
      message: currentMessage
    });
    let { data: { result } = {} } = response;
    if (result) {
      this.convertCache.set(currentMessage.ID, result);
    } else {
      result = "";
    }
    return result;
  }
  clear() {
    this.convertCache.clear();
  }
  disableCache() {
    this.isUseCache = false;
  }
  enableCache() {
    this.isUseCache = true;
  }
};
__publicField(_Convertor, "instance");
let Convertor = _Convertor;
const convertor = Convertor.getInstance();
exports.convertor = convertor;
