interface IProps {
    visible: boolean;
    popDirection: 'top' | 'right' | 'bottom' | 'left';
    useMask?: boolean;
    isFullScreen?: boolean | undefined;
    overlayColor?: string | undefined;
    drawerStyle?: {
        bottom?: Record<string, any> | undefined;
        right?: Record<string, any> | undefined;
        left?: Record<string, any> | undefined;
        top?: Record<string, any> | undefined;
    };
}
declare function __VLS_template(): {
    default?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<IProps>, {
    visible: boolean;
    useMask: boolean;
    isFullScreen: boolean;
    popDirection: string;
    drawerStyle: () => {};
}>>, {
    drawerDomRef: import('vue').Ref<HTMLElement | undefined, HTMLElement | undefined>;
    overlayDomRef: HTMLElement | undefined;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    onOverlayClick: (event: Event) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<IProps>, {
    visible: boolean;
    useMask: boolean;
    isFullScreen: boolean;
    popDirection: string;
    drawerStyle: () => {};
}>>> & Readonly<{
    onOnOverlayClick?: ((event: Event) => any) | undefined;
}>, {
    visible: boolean;
    isFullScreen: boolean;
    useMask: boolean;
    popDirection: "top" | "right" | "bottom" | "left";
    drawerStyle: {
        bottom?: Record<string, any> | undefined;
        right?: Record<string, any> | undefined;
        left?: Record<string, any> | undefined;
        top?: Record<string, any> | undefined;
    };
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
